<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>2022年《畅游上海一票通》品质版相关景点地图标点</title>
    <url>/2021/12/12/2022-shanghai-tutorial/</url>
    <content><![CDATA[<p>为了更好规划2022 《畅游上海一票通》品质版使用体验，预约景点，使用谷歌地图地图标点</p>
<p><strong>注意</strong></p>
<p>· 需要能够访问谷歌地图</p>
<p>· 地图标点不包括：热门景区（五选一） 标杆景区（五选一）</p>
<p>· 景点位置根据高德地图获得，最新位置请根据爱文亿景点详情确定 图中地点仅作参考</p>
<iframe src="https://www.google.com/maps/d/embed?mid=1oYic3aNvTNa81_bkHGq8asLDlHg9Lxyo&ehbc=2E312F" width="640" height="480"></iframe>]]></content>
      <categories>
        <category>tutorial</category>
      </categories>
      <tags>
        <tag>shanghai</tag>
      </tags>
  </entry>
  <entry>
    <title>Arrays.asList() ArrayList.addAll() Collection.addAll()简单分析</title>
    <url>/2021/12/18/Arrays-Array/</url>
    <content><![CDATA[<p>参考链接：</p>
<p>· <a href="https://www.jianshu.com/p/2b113f487e5e">Arrays.asList使用指南</a></p>
<p>· <a href="https://www.geeksforgeeks.org/collections-addall-method-in-java-with-examples/">Collections addAll() method in Java with Examples</a></p>
<h1 id="Arrays-asList"><a href="#Arrays-asList" class="headerlink" title="Arrays.asList"></a>Arrays.asList</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">String[] myArray=&#123;<span class="string">&quot;Apple&quot;</span>,<span class="string">&quot;Banana&quot;</span>,<span class="string">&quot;Orange&quot;</span>&#125;;</span><br><span class="line"><span class="keyword">int</span>[] intArrays=&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;;</span><br><span class="line"><span class="keyword">int</span>[] intArraysTwo=&#123;<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>&#125;;</span><br><span class="line">List&lt;String&gt; myStringList=Arrays.asList(myArray);</span><br><span class="line">List&lt;Integer&gt; myIntegerList=Arrays.asList(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>);</span><br><span class="line">List myIntList=Arrays.asList(intArrays);</span><br><span class="line">List myIntListTwo=Arrays.asList(intArrays,intArraysTwo);</span><br></pre></td></tr></table></figure>
<p>运行结果：<br><img src="/2021/12/18/Arrays-Array/Arrays.asList.png"></p>
<h2 id="注意点"><a href="#注意点" class="headerlink" title="注意点"></a>注意点</h2><h3 id="当原生数据类型数据的数组作为参数时"><a href="#当原生数据类型数据的数组作为参数时" class="headerlink" title="当原生数据类型数据的数组作为参数时"></a>当原生数据类型数据的数组作为参数时</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*Arrays.asList 源码*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; <span class="function">List&lt;T&gt; <span class="title">asList</span><span class="params">(T... a)</span></span>&#123;</span><br><span class="line">    <span class="comment">//ArrayList是定义的私有类 不能修改其中的元素</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> ArrayList&lt;&gt;(a);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">ArrayList</span>&lt;<span class="title">E</span>&gt; <span class="keyword">extends</span> <span class="title">AbstractList</span>&lt;<span class="title">E</span>&gt;</span></span><br><span class="line"><span class="class">        <span class="keyword">implements</span> <span class="title">RandomAccess</span>, <span class="title">java</span>.<span class="title">io</span>.<span class="title">Serializable</span></span></span><br><span class="line"><span class="class">    </span>&#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = -<span class="number">2764017481108945198L</span>;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">final</span> E[] a;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//E[] a 是定长的，不能新增或者删除元素</span></span><br><span class="line">        ArrayList(E[] array) &#123;</span><br><span class="line">            a = Objects.requireNonNull(array);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>参数类型是 T ，根据官方文档的描述，T 是数组元素的 class。</p>
<p>原生数据类型，比如 int，short，long等，是没有这个属性的，具有 class 属性的是它们所对应的包装类 Integer，Short，Long。</p>
<p>因此，这个错误产生的原因可解释为：asList 方法的参数必须是对象或者对象数组，而原生数据类型不是对象——这也正是包装类出现的一个主要原因。当传入一个原生数据类型数组时，asList 的真正得到的参数就不是数组中的元素，而是数组对象本身！此时List 的唯一元素就是这个数组。</p>
<p>根据断点，可以看到下面的语句执行过程中发生的转换</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span>[] intArrays=&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;;</span><br><span class="line"><span class="keyword">int</span>[] intArraysTwo=&#123;<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>&#125;;</span><br><span class="line"><span class="comment">//转换为int[1]类型</span></span><br><span class="line">List myIntList=Arrays.asList(intArray1);</span><br><span class="line"><span class="comment">//转换为int[2]类型</span></span><br><span class="line">List myIntListTwo=Arrays.asList(intArray1,intArrays2);</span><br></pre></td></tr></table></figure>

<p><img src="/2021/12/18/Arrays-Array/Arrays.asList.intnum.png"><br><img src="/2021/12/18/Arrays-Array/Arrays.asList.intnums.png"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List&lt;Integer&gt; myIntegerList=Arrays.asList(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>);</span><br></pre></td></tr></table></figure>
<p>断点可以看到将参数<code>1，2，3</code>转换为<code>Integer</code>类型<br><img src="/2021/12/18/Arrays-Array/Arrays.asList.Integer.png"></p>
<h1 id="ArrayList"><a href="#ArrayList" class="headerlink" title="ArrayList"></a>ArrayList</h1><h2 id="ArrayList-addAll-方法"><a href="#ArrayList-addAll-方法" class="headerlink" title="ArrayList.addAll 方法"></a>ArrayList.addAll 方法</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">addAll</span><span class="params">(Collection&lt;? extends E&gt; c)</span></span></span><br></pre></td></tr></table></figure>
<p>Appends all of the elements in the specified collection to the end of this list, in the order that they are returned by the specified collection’s Iterator. The behavior of this operation is undefined if the specified collection is modified while the operation is in progress. (This implies that the behavior of this call is undefined if the specified collection is this list, and this list is nonempty.)</p>
<h3 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">addAll</span><span class="params">(Collection&lt;? extends E&gt; c)</span> </span>&#123;</span><br><span class="line">     <span class="keyword">return</span> addAll(<span class="keyword">this</span>.size, c);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">addAll</span><span class="params">(<span class="keyword">int</span> index, Collection&lt;? extends E&gt; c)</span> </span>&#123;</span><br><span class="line">            rangeCheckForAdd(index);</span><br><span class="line">            <span class="keyword">int</span> cSize = c.size();</span><br><span class="line">            <span class="keyword">if</span> (cSize==<span class="number">0</span>)</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line">            checkForComodification();</span><br><span class="line">            parent.addAll(parentOffset + index, c);</span><br><span class="line">            <span class="keyword">this</span>.modCount = parent.modCount;</span><br><span class="line">            <span class="keyword">this</span>.size += cSize;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">addAll</span><span class="params">(<span class="keyword">int</span> index, Collection&lt;? extends E&gt; c)</span> </span>&#123;</span><br><span class="line">        rangeCheckForAdd(index);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//注意这里 输入的参数先会转换为Object[] 类型</span></span><br><span class="line">        <span class="comment">//将Object[] 类型依次增加</span></span><br><span class="line">        Object[] a = c.toArray();</span><br><span class="line">        <span class="keyword">int</span> numNew = a.length;</span><br><span class="line">        ensureCapacityInternal(size + numNew);  <span class="comment">// Increments modCount</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> numMoved = size - index;</span><br><span class="line">        <span class="keyword">if</span> (numMoved &gt; <span class="number">0</span>)</span><br><span class="line">            System.arraycopy(elementData, index, elementData, index + numNew,</span><br><span class="line">                             numMoved);</span><br><span class="line"></span><br><span class="line">        System.arraycopy(a, <span class="number">0</span>, elementData, index, numNew);</span><br><span class="line">        size += numNew;</span><br><span class="line">        <span class="keyword">return</span> numNew != <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span>[] intArray1=&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;;</span><br><span class="line"><span class="keyword">int</span>[] intArrays2=&#123;<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>&#125;;</span><br><span class="line"></span><br><span class="line">ArrayList arrayList1=<span class="keyword">new</span> ArrayList&lt;&gt;(Arrays.asList(<span class="string">&quot;1&quot;</span>,<span class="string">&quot;2&quot;</span>,<span class="string">&quot;3&quot;</span>));</span><br><span class="line">ArrayList arrayList2=<span class="keyword">new</span> ArrayList&lt;&gt;(Arrays.asList(intArray1,intArrays2));</span><br><span class="line"></span><br><span class="line">ArrayList&lt;Integer&gt; arrayList=<span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">arrayList.addAll(arrayList1);</span><br><span class="line">arrayList.addAll(arrayList2);</span><br></pre></td></tr></table></figure>
<p><img src="/2021/12/18/Arrays-Array/ArrayList.addAll1.png"></p>
<h1 id="Collections"><a href="#Collections" class="headerlink" title="Collections"></a>Collections</h1><h2 id="addAll"><a href="#addAll" class="headerlink" title="addAll()"></a>addAll()</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">static</span> &lt;T&gt; <span class="function"><span class="keyword">boolean</span>	<span class="title">addAll</span><span class="params">(Collection&lt;? <span class="keyword">super</span> T&gt; c, T... elements)</span></span>&#123;</span><br><span class="line">    <span class="comment">//使用数组迭代器，将元素添加到arrays中</span></span><br><span class="line">    <span class="keyword">boolean</span> result = <span class="keyword">false</span>;</span><br><span class="line">    <span class="keyword">for</span> (T element : elements)</span><br><span class="line">        result |= c.add(element);</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*Adds all of the specified elements to the specified collection.</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">Parameters: This method takes the following argument as a parameter</span></span><br><span class="line"><span class="comment">c- the collection into which elements are to be inserted</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">elements- the elements to insert into c</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">Return Value: This method returns true if the collection changed as a result of the call.</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>

<p>The behavior of this convenience method is identical to that of c.addAll(Arrays.asList(elements)), but this method is likely to run significantly faster under most implementations.</p>
<p>· Collections.addAll()比arrays.addAll()方法快得多！</p>
]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>Arrays</tag>
        <tag>ArrayList</tag>
        <tag>Collection</tag>
      </tags>
  </entry>
  <entry>
    <title>HEXO 自建博客备份GitHub</title>
    <url>/2021/08/08/HEXO-manual/</url>
    <content><![CDATA[<h1 id="HEXO博客备份"><a href="#HEXO博客备份" class="headerlink" title="HEXO博客备份"></a>HEXO博客备份</h1><p>由于自己换了电脑，忘记博客备份，只能重新搭建。为防止以后发生同样的情况，特将相关笔记记录一下。</p>
<h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a><strong>参考链接</strong></h2><ul>
<li><a href="https://mupceet.com/2019/09/backup-hexo-blog/">https://mupceet.com/2019/09/backup-hexo-blog/</a></li>
</ul>
<h2 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a><strong>步骤</strong></h2><h3 id="初次备份"><a href="#初次备份" class="headerlink" title="初次备份"></a><strong>初次备份</strong></h3><p>按照以下步骤，详情可以看一下参考链接</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"><span class="built_in">cd</span> blog</span></span><br><span class="line"><span class="meta">$</span><span class="bash">git init</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">$</span><span class="bash">git submodule https://github.com/theme-next/hexo-theme-next.git themes/next</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">$</span><span class="bash">git add .</span></span><br><span class="line"><span class="meta">$</span><span class="bash">git commit -m <span class="string">&quot;init blog backup&quot;</span></span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 为了便于记忆 将main分支重命名为hexo分支 对应github.io中的备份分支hexo</span></span><br><span class="line"><span class="meta">$</span><span class="bash">git branch -m master hexo</span></span><br><span class="line"><span class="meta">$</span><span class="bash">git remote add origin https://github.com/XXX/XXX.github.io.git</span></span><br><span class="line"><span class="meta">$</span><span class="bash">git push -u origin hexo:hexo</span></span><br></pre></td></tr></table></figure>

<h3 id="初次备份后"><a href="#初次备份后" class="headerlink" title="初次备份后"></a><strong>初次备份后</strong></h3><ul>
<li><p><strong>博客网页部署</strong>按照<code>hexo g,  hexo s,   hexo d</code>等命令进行生成，浏览，部署</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">hexo g</span><br><span class="line">hexo s</span><br><span class="line">hexo d</span><br></pre></td></tr></table></figure></li>
<li><p><strong>博客源代码备份</strong> <code>hexo</code>分支按照日常使用的<code>git</code>命令，推送到<code>github</code>的<code>hexo</code>分支上</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git add xxx</span><br><span class="line">git commit -m &quot;backup&quot;</span><br><span class="line">git push origin hexo:hexo</span><br></pre></td></tr></table></figure></li>
</ul>
]]></content>
      <categories>
        <category>hexo</category>
      </categories>
  </entry>
  <entry>
    <title>《Kafka The Definitive Guide 2nd Edition》 PDF</title>
    <url>/2021/12/30/Kafka-The-Definitive-Guide-2nd-Edition/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <script id="hbeData" type="hbeData" data-hmacdigest="609d1ccf2611176bf684f9b568b1937af1ea2a25bbc2a14a5b2e379e26a2704d">b96ea2d34b1964c9b8d9ae3e4fcb836e766111610f30d5bdb3e44f23bf95a801798e4039618c7309b3a40a11d2eb1b657ded753e12adf6517693155a4bfb4b7d6c08eefd2b9c2304b0c2043836f3ad2de7b284b51f41b8e710767855fe7d34e72f8c74910e44762e8099e42f6c3cb0c19c3e5e1f7dda7a6157d84a68482bc4ca105d9aa5efa747163794207f7ddf996fdb31e497bcaf8e27e6ea7bdccc313612580feba680c785dc842213595273a96f47b6dc18c7b7228df846cb58375ad372e15602bea7f163c8d8ce25b03cf85ccf13345782026dc4b5cea8c4f65f2cb233d7f8e0ca62c15c90a86b6e9d5deadcb423362e23481269947c356c5222d7f3aeb6053a1c6d39e250ff443bb7a1b4378b98e588f28b8d101410bd88e44e221de84f8869b2a0111d320dd8ebd915b4af775310e42a12a78094155aa8ff44915cf99884518dfe61fc7da071e642c2193eac632f1476b31f208813badb618e140372</script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>kafka</category>
      </categories>
      <tags>
        <tag>kafka</tag>
        <tag>pdf</tag>
      </tags>
  </entry>
  <entry>
    <title>LinkedCaseInsensitveMap 大小写不敏感，用于数据库数据查询</title>
    <url>/2021/10/29/LinkedCaseInsensitveMap/</url>
    <content><![CDATA[<h1 id="LinkedCaseInsensitiveMap"><a href="#LinkedCaseInsensitiveMap" class="headerlink" title="LinkedCaseInsensitiveMap"></a><code>LinkedCaseInsensitiveMap</code></h1><h2 id="LinkedCaseInsensitiveMap-大小写不敏感"><a href="#LinkedCaseInsensitiveMap-大小写不敏感" class="headerlink" title="LinkedCaseInsensitiveMap 大小写不敏感"></a><code>LinkedCaseInsensitiveMap</code> 大小写不敏感</h2><p>在公司<code>debug</code>的时候，发现<code>Map&lt;String,Object&gt;</code> 类型的<code>Map</code> 对于大小写不敏感，后来看到<code>IDEA</code> 中对象的类型是<code>LinkedCaseInsensitiveMap</code>类型。<code>LinkedCaseInsensitiveMap</code>继承于<code>LinkedHashMap</code>，<code>LinkedCaseInsensitiveMap</code>可以检测关键字（不区分大小写）的唯一性，源码如下。</p>
<p><img src="/2021/10/29/LinkedCaseInsensitveMap/image-20211029081040884.png" alt="image-20211029081040884"></p>
<p><code>LinkedCaseInsensitiveMap</code>中有两个属性<code>LinkedHashMap&lt;String,V&gt; targetMap</code>和<code>HashMap&lt;String,String&gt; caseInsensitiveMap</code>。</p>
<p>输入值<code>Key,Value</code>， <code>CaseInsensitveMap</code>存储<code>小写Key, Key</code>，<code>targetMap</code> 存储<code>Key,Value</code>。</p>
<p><strong>源码</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LinkedCaseInsensitiveMap</span>&lt;<span class="title">V</span>&gt; <span class="keyword">implements</span> <span class="title">Map</span>&lt;<span class="title">String</span>, <span class="title">V</span>&gt;, <span class="title">Serializable</span>, <span class="title">Cloneable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">final</span> LinkedHashMap&lt;String, V&gt; targetMap;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">final</span> HashMap&lt;String, String&gt; caseInsensitiveKeys;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">final</span> Locale locale;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Nullable</span></span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">transient</span> <span class="keyword">volatile</span> Set&lt;String&gt; keySet;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Nullable</span></span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">transient</span> <span class="keyword">volatile</span> Collection&lt;V&gt; values;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Nullable</span></span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">transient</span> <span class="keyword">volatile</span> Set&lt;Entry&lt;String, V&gt;&gt; entrySet;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * caseInsensitiveKeys(HashMap类型) 将Key转换为小写，caseInsensitiveKeys存储 小写key -- Key</span></span><br><span class="line"><span class="comment">    * targetMap(LinkedHashMap类型) Key -- Value</span></span><br><span class="line"><span class="comment">    * 实例： </span></span><br><span class="line"><span class="comment">    * put(&quot;ABCDEF&quot;,2)</span></span><br><span class="line"><span class="comment">    * caseInsensitiveKeys: abcdef--&gt;ABCDEF</span></span><br><span class="line"><span class="comment">    * targetMap: ABCDEF--&gt; 2</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">	<span class="meta">@Nullable</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> V <span class="title">put</span><span class="params">(String key, <span class="meta">@Nullable</span> V value)</span> </span>&#123;</span><br><span class="line">		String oldKey = <span class="keyword">this</span>.caseInsensitiveKeys.put(convertKey(key), key);</span><br><span class="line">		V oldKeyValue = <span class="keyword">null</span>;</span><br><span class="line">		<span class="keyword">if</span> (oldKey != <span class="keyword">null</span> &amp;&amp; !oldKey.equals(key)) &#123;</span><br><span class="line">			oldKeyValue = <span class="keyword">this</span>.targetMap.remove(oldKey);</span><br><span class="line">		&#125;</span><br><span class="line">		V oldValue = <span class="keyword">this</span>.targetMap.put(key, value);</span><br><span class="line">		<span class="keyword">return</span> (oldKeyValue != <span class="keyword">null</span> ? oldKeyValue : oldValue);</span><br><span class="line">	&#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">	<span class="meta">@Nullable</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> V <span class="title">get</span><span class="params">(Object key)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">if</span> (key <span class="keyword">instanceof</span> String) &#123;</span><br><span class="line">			String caseInsensitiveKey = <span class="keyword">this</span>.caseInsensitiveKeys.get(convertKey((String) key));</span><br><span class="line">			<span class="keyword">if</span> (caseInsensitiveKey != <span class="keyword">null</span>) &#123;</span><br><span class="line">				<span class="keyword">return</span> <span class="keyword">this</span>.targetMap.get(caseInsensitiveKey);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">	&#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">protected</span> String <span class="title">convertKey</span><span class="params">(String key)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> key.toLowerCase(getLocale());</span><br><span class="line">	&#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>java</category>
      </categories>
  </entry>
  <entry>
    <title>Spring Framework Documentation</title>
    <url>/2021/08/15/Spring-Framework-Documentation/</url>
    <content><![CDATA[<h1 id="控制反转-IoC"><a href="#控制反转-IoC" class="headerlink" title="控制反转 IoC"></a>控制反转 IoC</h1><p>控制反转（IoC，Inversion of Control )，也被称为依赖注入（DI，dependency injection）。</p>
<p>基础类：<code>org.springframework.beans</code>和<code>org.springframework.context</code></p>
<p>BeanFactory接口 –  public interface ListableBeanFactory extends BeanFactory –  子接口 ApplicationContext  interface ApplicationContext extends EnvironmentCapable, ListableBeanFactory, HierarchicalBeanFactory,<br>        MessageSource, ApplicationEventPublisher, ResourcePatternResolver</p>
<p>ApplicationContext是BeanFactory的superset</p>
<p>Spring, In Spring, the objects that form the backbone of your application and that are managed by the Spring IoC container are called beans. .</p>
<p>A bean is an object that is instantiated, assembled, and managed by a Spring IoC container.</p>
<p>org.springframework.context.ApplicationContext 接口代表了IoC容器，负责实例化、配置和装配beans.</p>
<p>在stand-alone应用中，一般使用<a href="https://docs.spring.io/spring-framework/docs/5.3.9/javadoc-api/org/springframework/context/support/ClassPathXmlApplicationContext.html"><code>ClassPathXmlApplicationContext</code></a> or <a href="https://docs.spring.io/spring-framework/docs/5.3.9/javadoc-api/org/springframework/context/support/FileSystemXmlApplicationContext.html"><code>FileSystemXmlApplicationContext</code></a></p>
<p>支持XML、Java Annotation等方式，可以通过少量 XML方式来说明支持注解方式。</p>
<p><img src="/2021/08/15/Spring-Framework-Documentation/container-magic.png" alt="container magic"></p>
]]></content>
      <categories>
        <category>spring</category>
      </categories>
      <tags>
        <tag>spring</tag>
      </tags>
  </entry>
  <entry>
    <title>git fetch git pull 对比</title>
    <url>/2021/08/20/git-fetch-git-pull/</url>
    <content><![CDATA[<p>参考链接：</p>
<ul>
<li><a href="https://www.cnblogs.com/Venom/p/5477367.html">https://www.cnblogs.com/Venom/p/5477367.html</a></li>
<li><a href="https://www.jianshu.com/p/a5c4d2f99807">https://www.jianshu.com/p/a5c4d2f99807</a></li>
<li><a href="https://ruby-china.org/topics/4768">https://ruby-china.org/topics/4768</a></li>
<li></li>
</ul>
<h1 id="Git-Fetch"><a href="#Git-Fetch" class="headerlink" title="Git Fetch"></a>Git Fetch</h1><p>理解 <code>fetch</code> 的关键， 是理解 <code>FETCH_HEAD</code>。</p>
<p><code>FETCH_HEAD</code>指的是： <code>某个branch在服务器上的最新状态</code>。每一个执行过<code>fetch</code>操作的项目都会存在一个<code>FETCH_HEAD</code>列表，<br>这个列表保存在 <code>.git/FETCH_HEAD</code> 文件中， 其中每一行对应于远程服务器的一个分支。<br><strong><code>FETCH_HEAD</code>当前指向的远程分支就是这个文件第一行对应的那个分支</strong>。如下图所示，当前<code>FETCH_HEAD</code> 指向远程分支 <code>3.0.x</code>。</p>
<p><img src="/2021/08/20/git-fetch-git-pull/image-20210822110945856.png" alt="image-20210822110945856"></p>
<h2 id="常用方法"><a href="#常用方法" class="headerlink" title="常用方法"></a>常用方法</h2><p>常见的<code>git fetch</code> 使用方式包含以下四种：</p>
<h3 id="git-fetch"><a href="#git-fetch" class="headerlink" title="git fetch"></a><strong><code>git fetch</code></strong></h3><p>这一步其实是执行了两个关键操作：<br>第一步：创建并更新所有远程分支的本地远程分支。即创建并更新<code>origin/xxx</code>分支，拉取代码到<code>origin/xxx</code>分支上。<br>第二步：设定<code>FETCH_HEAD</code>为远程服务器的<code>origin/当前分支</code>。例如，当前分支为<code>main</code> 分支，<code>git fetch</code>命令后，<code>FETCH_HEAD</code>对应<code>origin/main</code>。后期可以使用<code>git merge FETCH_HEAD</code>命令，合并本地<code>main</code> 分支和<code>FETCH_HEAD</code>远程拉取下来的<code>origin/main</code>。</p>
<p>需要注意的是： 和<code>push</code>不同， <code>fetch</code>会自动获取远程新加入的分支，拉取当前项目的所有分支的<code>commit</code>。</p>
<p><img src="/2021/08/20/git-fetch-git-pull/image-20210822103443321.png" alt="image-20210822103443321"></p>
<h3 id="git-fetch-origin"><a href="#git-fetch-origin" class="headerlink" title="git fetch origin"></a><strong><code>git fetch origin</code></strong></h3><p>同上， 只不过手动指定了remote。</p>
<p><img src="/2021/08/20/git-fetch-git-pull/image-20210822111609139.png" alt="image-20210822111609139"></p>
<h3 id="git-fetch-origin-branch1"><a href="#git-fetch-origin-branch1" class="headerlink" title="git fetch origin branch1"></a><strong><code>git fetch origin branch1</code></strong></h3><p>设定当前分支的 <code>FETCH_HEAD</code> 为远程服务器的<code>branch1</code>分支。</p>
<p>注意： 在这种情况下， 不会在本地创建本地远程分支， 这是因为：</p>
<p>这个操作是<code>git pull origin branch1</code>的第一步， 而对应的<code>pull</code>操作，并不会在本地创建新的<code>branch</code>。</p>
<p>一个附加效果是：</p>
<p>这个命令可以用来测试远程主机的远程分支<code>branch1</code>是否存在， 如果存在， 返回0， 如果不存在， 返回128， 抛出一个异常。</p>
<p><img src="/2021/08/20/git-fetch-git-pull/image-20210822104901851.png" alt="image-20210822104901851"></p>
<h3 id="git-fetch-origin-branch1-branch2"><a href="#git-fetch-origin-branch1-branch2" class="headerlink" title="git fetch origin branch1:branch2"></a><strong><code>git fetch origin branch1:branch2</code></strong></h3><p>只要明白了上面的含义， 这个就很简单了，</p>
<ul>
<li><p>首先执行上面的<code>fetch</code>操作</p>
</li>
<li><p>使用远程<code>branch1</code>分支在本地创建<code>branch2</code>(但不会切换到该分支)，<br>如果本地不存在<code>branch2</code>分支， 则会自动创建一个新的<code>branch2</code>分支，<br>如果本地存在<code>branch2</code>分支， 并且是<code>fast forward</code>， 则自动合并两个分支， 否则， 会阻止以上操作。</p>
<p><img src="/2021/08/20/git-fetch-git-pull/image-20210822105955364.png" alt="image-20210822105955364"></p>
</li>
</ul>
<h1 id="Git-Pull"><a href="#Git-Pull" class="headerlink" title="Git Pull"></a>Git Pull</h1><p>只要理解了<code>git fetch</code>， <code>git pull</code>就太简单了。</p>
<p><code>git pull</code> 等价于以下两步：</p>
<ul>
<li>经命令中的<code>pull</code>换成<code>fetch</code>， 执行</li>
<li><code>git merge FETCH_HEAD</code></li>
</ul>
]]></content>
      <categories>
        <category>git</category>
      </categories>
      <tags>
        <tag>git</tag>
        <tag>manual</tag>
      </tags>
  </entry>
  <entry>
    <title>《Redis开发与运维》PDF</title>
    <url>/2021/12/31/Redis-DevOps/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <script id="hbeData" type="hbeData" data-hmacdigest="0a81862bd2db6007cecc77b9621d21f394799141c603d91dfb60c88a798f3ff0">b96ea2d34b1964c9b8d9ae3e4fcb836ebda2eb645f9f733ceaa8bfc3f6f380960260492b5f64123347f1bd016fafd8787c1a261bbca7ca4484469cc9178e2a35fa147b99d7dbc82671460758d7ae122962ef862eb98d067c32681d79b0c0581e360c41aef5082019ad34216c86f4990c2732756ae6948856045b96e4cc9bfd2a</script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>redis</category>
      </categories>
      <tags>
        <tag>redis</tag>
        <tag>pdf</tag>
      </tags>
  </entry>
  <entry>
    <title>HEXO 博客显示PDF，并控制博客访问权限</title>
    <url>/2021/12/31/hexo-pdf-security/</url>
    <content><![CDATA[<h1 id="HEXO博客中插入PDF"><a href="#HEXO博客中插入PDF" class="headerlink" title="HEXO博客中插入PDF"></a>HEXO博客中插入PDF</h1><h2 id="config-yml文件修改"><a href="#config-yml文件修改" class="headerlink" title="_config.yml文件修改"></a>_config.yml文件修改</h2><p>将hexo博客根目录下<code>_config.yml</code>配置文件中的<code>post_asset_folder</code>选项设置为<code>true</code>  </p>
<p>该选项的功能说明如下:<br><code>当设置post_asset_folder为true参数后，在建立文件时，Hexo会自动建立一个与文章同名的文件夹，可以把与该文章相关的所有资源都放到那个文件夹，更方便的使用资源。</code></p>
<h2 id="新建一篇文章并插入PDF"><a href="#新建一篇文章并插入PDF" class="headerlink" title="新建一篇文章并插入PDF"></a>新建一篇文章并插入PDF</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ hexo new &lt;article name&gt;</span><br></pre></td></tr></table></figure>

<p>在<code>source/_post</code>文件夹下，会生成<code>&lt;article name&gt;.md</code>和<code>&lt;article name&gt;</code>文件夹。将想要显示的PDF 放到<code>&lt;article name&gt;</code>文件夹下，并在<code>&lt;article name&gt;.md</code> 文章，插入如下代码：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;object data=<span class="string">&quot;XXX.pdf&quot;</span>  type=<span class="string">&quot;application/pdf&quot;</span> width=<span class="string">&quot;100%&quot;</span> height=<span class="string">&quot;877px&quot;</span>&gt;</span><br></pre></td></tr></table></figure>

<p>然后通过<code>hexo g </code>和<code>hexo s</code>查看显示效果。</p>
<h1 id="HEXO设置文章访问密码"><a href="#HEXO设置文章访问密码" class="headerlink" title="HEXO设置文章访问密码"></a>HEXO设置文章访问密码</h1><p>因为有一些PDF涉及版权，或者自己有一些文章不便于面向互联网发布。可以通过设置访问密码的方式控制文章的访问权限。  </p>
<p>主要用到的是<code>hexo-blog-encrypt</code> ，开源项目地址链接为：<a href="https://github.com/D0n9X1n/hexo-blog-encrypt/blob/master/ReadMe.zh.md">https://github.com/D0n9X1n/hexo-blog-encrypt/blob/master/ReadMe.zh.md</a></p>
]]></content>
      <categories>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>manual</tag>
      </tags>
  </entry>
  <entry>
    <title>mysql</title>
    <url>/2022/01/05/mysql/</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>mysql</category>
      </categories>
      <tags>
        <tag>mysql</tag>
        <tag>notes</tag>
      </tags>
  </entry>
  <entry>
    <title>数据库横表纵表分析</title>
    <url>/2022/01/05/%E6%95%B0%E6%8D%AE%E5%BA%93%E6%A8%AA%E8%A1%A8%E7%BA%B5%E8%A1%A8%E5%88%86%E6%9E%90/</url>
    <content><![CDATA[<p>参考链接：  </p>
<ul>
<li><a href="https://blog.csdn.net/zhangzeyuaaa/article/details/50675058">纵表和横表的概念及其相互转换</a></li>
<li><a href="https://www.cnblogs.com/wy123/p/6677073.html">数据库设计—关于建表的时候选择横表和竖表(纵表)的一点思考</a></li>
<li><h1 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h1><h2 id="横表"><a href="#横表" class="headerlink" title="横表"></a>横表</h2>普通的建表方式，如表结构：主键、字段1、字段2、字段3…。以Key-value1-value2-value3的形式存储。</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `horizontal_table` (</span><br><span class="line">  `员工编号` <span class="type">char</span>(<span class="number">6</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `基本工资` <span class="type">int</span> <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `加班工资` <span class="type">int</span> <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `报销费用` <span class="type">int</span> <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `社保扣款` <span class="type">int</span> <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `公积金扣款` <span class="type">int</span> <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `个税扣款` <span class="type">int</span> <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`员工编号`)</span><br><span class="line">)</span><br></pre></td></tr></table></figure>
<p><img src="/2022/01/05/%E6%95%B0%E6%8D%AE%E5%BA%93%E6%A8%AA%E8%A1%A8%E7%BA%B5%E8%A1%A8%E5%88%86%E6%9E%90/%E6%A8%AA%E8%A1%A8.png" alt="横表"></p>
<h2 id="纵表"><a href="#纵表" class="headerlink" title="纵表"></a>纵表</h2><p>纵表后，则表结构为： 主键、字段代码、字段值。而字段代码则为字段1、字段2、字段3…。  特点是每行进存储某一个实体记录的某一个字段的值，以行的形式Key-Value进行存储。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `vertical_table` (</span><br><span class="line">  `id` <span class="type">int</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT,</span><br><span class="line">  `员工编号` <span class="type">varchar</span>(<span class="number">6</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `款项` <span class="type">varchar</span>(<span class="number">20</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `金额` <span class="type">int</span> <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`id`)</span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB AUTO_INCREMENT<span class="operator">=</span><span class="number">5</span> <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8mb4 <span class="keyword">COLLATE</span><span class="operator">=</span>utf8mb4_0900_ai_ci</span><br></pre></td></tr></table></figure>
<p><img src="/2022/01/05/%E6%95%B0%E6%8D%AE%E5%BA%93%E6%A8%AA%E8%A1%A8%E7%BA%B5%E8%A1%A8%E5%88%86%E6%9E%90/%E7%BA%B5%E8%A1%A8.png" alt="纵表"></p>
<table>
<thead>
<tr>
<th></th>
<th>横表</th>
<th>纵表</th>
</tr>
</thead>
<tbody><tr>
<td>表结构</td>
<td>主键、字段1、字段2、字段3…</td>
<td>主键、字段代码、字段值</td>
</tr>
<tr>
<td>优点</td>
<td>一条表示一个实体记录，清晰</td>
<td>给表新增字段，只需要新增一些记录。灵活拓展存储的内容，具有一定的共用性</td>
</tr>
<tr>
<td>缺点</td>
<td>给表新增字段，必须重构表结构，不方便拓展和公用</td>
<td>数据描述比横表不清晰。如果需要分组统计，需要先group by，较繁琐</td>
</tr>
<tr>
<td>形式</td>
<td>Key-Value1-Value2-…（一条）</td>
<td>Key-Value1（多条）</td>
</tr>
<tr>
<td></td>
<td>各个字段的值是自由的</td>
<td>字段的类型是固定的，类型要兼容</td>
</tr>
<tr>
<td></td>
<td>表中不存储描述性字段本身（相对于纵表）</td>
<td>表中需要存储描述性字段本身（相比横表）</td>
</tr>
<tr>
<td></td>
<td>存储同样多的数据，行数要少（相对于纵表）</td>
<td>存储同样多的数据，行数要多（相对于横表）</td>
</tr>
</tbody></table>
<h2 id="横表转纵表"><a href="#横表转纵表" class="headerlink" title="横表转纵表"></a>横表转纵表</h2><p>结论：  </p>
<ul>
<li><strong>把不容易改动表结构的设计成横表，把容易经常改动不确定的表结构设计成纵表。</strong></li>
<li></li>
</ul>
]]></content>
      <categories>
        <category>mysql</category>
        <category>[object Object]</category>
      </categories>
      <tags>
        <tag>mysql</tag>
      </tags>
  </entry>
</search>
