<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>2022年《畅游上海一票通》品质版相关景点地图标点</title>
    <url>/2021/12/12/2022-shanghai-tutorial/</url>
    <content><![CDATA[<p>为了更好规划2022 《畅游上海一票通》品质版使用体验，预约景点，使用谷歌地图地图标点</p>
<p><strong>注意</strong></p>
<p>· 需要能够访问谷歌地图</p>
<p>· 地图标点不包括：热门景区（五选一） 标杆景区（五选一）</p>
<p>· 景点位置根据高德地图获得，最新位置请根据爱文亿景点详情确定 图中地点仅作参考</p>
<iframe src="https://www.google.com/maps/d/embed?mid=1oYic3aNvTNa81_bkHGq8asLDlHg9Lxyo&ehbc=2E312F" width="640" height="480"></iframe>]]></content>
      <categories>
        <category>tutorial</category>
      </categories>
      <tags>
        <tag>shanghai</tag>
      </tags>
  </entry>
  <entry>
    <title>Arrays.asList() ArrayList.addAll() Collection.addAll()简单分析</title>
    <url>/2021/12/18/Arrays-Array/</url>
    <content><![CDATA[<p>参考链接：</p>
<p>· <a href="https://www.jianshu.com/p/2b113f487e5e">Arrays.asList使用指南</a></p>
<p>· <a href="https://www.geeksforgeeks.org/collections-addall-method-in-java-with-examples/">Collections addAll() method in Java with Examples</a></p>
<h1 id="Arrays-asList"><a href="#Arrays-asList" class="headerlink" title="Arrays.asList"></a>Arrays.asList</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">String[] myArray=&#123;<span class="string">&quot;Apple&quot;</span>,<span class="string">&quot;Banana&quot;</span>,<span class="string">&quot;Orange&quot;</span>&#125;;</span><br><span class="line"><span class="keyword">int</span>[] intArrays=&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;;</span><br><span class="line"><span class="keyword">int</span>[] intArraysTwo=&#123;<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>&#125;;</span><br><span class="line">List&lt;String&gt; myStringList=Arrays.asList(myArray);</span><br><span class="line">List&lt;Integer&gt; myIntegerList=Arrays.asList(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>);</span><br><span class="line">List myIntList=Arrays.asList(intArrays);</span><br><span class="line">List myIntListTwo=Arrays.asList(intArrays,intArraysTwo);</span><br></pre></td></tr></table></figure>
<p>运行结果：<br><img src="/2021/12/18/Arrays-Array/Arrays.asList.png"></p>
<h2 id="注意点"><a href="#注意点" class="headerlink" title="注意点"></a>注意点</h2><h3 id="当原生数据类型数据的数组作为参数时"><a href="#当原生数据类型数据的数组作为参数时" class="headerlink" title="当原生数据类型数据的数组作为参数时"></a>当原生数据类型数据的数组作为参数时</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*Arrays.asList 源码*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; <span class="function">List&lt;T&gt; <span class="title">asList</span><span class="params">(T... a)</span></span>&#123;</span><br><span class="line">    <span class="comment">//ArrayList是定义的私有类 不能修改其中的元素</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> ArrayList&lt;&gt;(a);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">ArrayList</span>&lt;<span class="title">E</span>&gt; <span class="keyword">extends</span> <span class="title">AbstractList</span>&lt;<span class="title">E</span>&gt;</span></span><br><span class="line"><span class="class">        <span class="keyword">implements</span> <span class="title">RandomAccess</span>, <span class="title">java</span>.<span class="title">io</span>.<span class="title">Serializable</span></span></span><br><span class="line"><span class="class">    </span>&#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = -<span class="number">2764017481108945198L</span>;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">final</span> E[] a;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//E[] a 是定长的，不能新增或者删除元素</span></span><br><span class="line">        ArrayList(E[] array) &#123;</span><br><span class="line">            a = Objects.requireNonNull(array);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>参数类型是 T ，根据官方文档的描述，T 是数组元素的 class。</p>
<p>原生数据类型，比如 int，short，long等，是没有这个属性的，具有 class 属性的是它们所对应的包装类 Integer，Short，Long。</p>
<p>因此，这个错误产生的原因可解释为：asList 方法的参数必须是对象或者对象数组，而原生数据类型不是对象——这也正是包装类出现的一个主要原因。当传入一个原生数据类型数组时，asList 的真正得到的参数就不是数组中的元素，而是数组对象本身！此时List 的唯一元素就是这个数组。</p>
<p>根据断点，可以看到下面的语句执行过程中发生的转换</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span>[] intArrays=&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;;</span><br><span class="line"><span class="keyword">int</span>[] intArraysTwo=&#123;<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>&#125;;</span><br><span class="line"><span class="comment">//转换为int[1]类型</span></span><br><span class="line">List myIntList=Arrays.asList(intArray1);</span><br><span class="line"><span class="comment">//转换为int[2]类型</span></span><br><span class="line">List myIntListTwo=Arrays.asList(intArray1,intArrays2);</span><br></pre></td></tr></table></figure>

<p><img src="/2021/12/18/Arrays-Array/Arrays.asList.intnum.png"><br><img src="/2021/12/18/Arrays-Array/Arrays.asList.intnums.png"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List&lt;Integer&gt; myIntegerList=Arrays.asList(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>);</span><br></pre></td></tr></table></figure>
<p>断点可以看到将参数<code>1，2，3</code>转换为<code>Integer</code>类型<br><img src="/2021/12/18/Arrays-Array/Arrays.asList.Integer.png"></p>
<h1 id="ArrayList"><a href="#ArrayList" class="headerlink" title="ArrayList"></a>ArrayList</h1><h2 id="ArrayList-addAll-方法"><a href="#ArrayList-addAll-方法" class="headerlink" title="ArrayList.addAll 方法"></a>ArrayList.addAll 方法</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">addAll</span><span class="params">(Collection&lt;? extends E&gt; c)</span></span></span><br></pre></td></tr></table></figure>
<p>Appends all of the elements in the specified collection to the end of this list, in the order that they are returned by the specified collection’s Iterator. The behavior of this operation is undefined if the specified collection is modified while the operation is in progress. (This implies that the behavior of this call is undefined if the specified collection is this list, and this list is nonempty.)</p>
<h3 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">addAll</span><span class="params">(Collection&lt;? extends E&gt; c)</span> </span>&#123;</span><br><span class="line">     <span class="keyword">return</span> addAll(<span class="keyword">this</span>.size, c);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">addAll</span><span class="params">(<span class="keyword">int</span> index, Collection&lt;? extends E&gt; c)</span> </span>&#123;</span><br><span class="line">            rangeCheckForAdd(index);</span><br><span class="line">            <span class="keyword">int</span> cSize = c.size();</span><br><span class="line">            <span class="keyword">if</span> (cSize==<span class="number">0</span>)</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line">            checkForComodification();</span><br><span class="line">            parent.addAll(parentOffset + index, c);</span><br><span class="line">            <span class="keyword">this</span>.modCount = parent.modCount;</span><br><span class="line">            <span class="keyword">this</span>.size += cSize;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">addAll</span><span class="params">(<span class="keyword">int</span> index, Collection&lt;? extends E&gt; c)</span> </span>&#123;</span><br><span class="line">        rangeCheckForAdd(index);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//注意这里 输入的参数先会转换为Object[] 类型</span></span><br><span class="line">        <span class="comment">//将Object[] 类型依次增加</span></span><br><span class="line">        Object[] a = c.toArray();</span><br><span class="line">        <span class="keyword">int</span> numNew = a.length;</span><br><span class="line">        ensureCapacityInternal(size + numNew);  <span class="comment">// Increments modCount</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> numMoved = size - index;</span><br><span class="line">        <span class="keyword">if</span> (numMoved &gt; <span class="number">0</span>)</span><br><span class="line">            System.arraycopy(elementData, index, elementData, index + numNew,</span><br><span class="line">                             numMoved);</span><br><span class="line"></span><br><span class="line">        System.arraycopy(a, <span class="number">0</span>, elementData, index, numNew);</span><br><span class="line">        size += numNew;</span><br><span class="line">        <span class="keyword">return</span> numNew != <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span>[] intArray1=&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;;</span><br><span class="line"><span class="keyword">int</span>[] intArrays2=&#123;<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>&#125;;</span><br><span class="line"></span><br><span class="line">ArrayList arrayList1=<span class="keyword">new</span> ArrayList&lt;&gt;(Arrays.asList(<span class="string">&quot;1&quot;</span>,<span class="string">&quot;2&quot;</span>,<span class="string">&quot;3&quot;</span>));</span><br><span class="line">ArrayList arrayList2=<span class="keyword">new</span> ArrayList&lt;&gt;(Arrays.asList(intArray1,intArrays2));</span><br><span class="line"></span><br><span class="line">ArrayList&lt;Integer&gt; arrayList=<span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">arrayList.addAll(arrayList1);</span><br><span class="line">arrayList.addAll(arrayList2);</span><br></pre></td></tr></table></figure>
<p><img src="/2021/12/18/Arrays-Array/ArrayList.addAll1.png"></p>
<h1 id="Collections"><a href="#Collections" class="headerlink" title="Collections"></a>Collections</h1><h2 id="addAll"><a href="#addAll" class="headerlink" title="addAll()"></a>addAll()</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">static</span> &lt;T&gt; <span class="function"><span class="keyword">boolean</span>	<span class="title">addAll</span><span class="params">(Collection&lt;? <span class="keyword">super</span> T&gt; c, T... elements)</span></span>&#123;</span><br><span class="line">    <span class="comment">//使用数组迭代器，将元素添加到arrays中</span></span><br><span class="line">    <span class="keyword">boolean</span> result = <span class="keyword">false</span>;</span><br><span class="line">    <span class="keyword">for</span> (T element : elements)</span><br><span class="line">        result |= c.add(element);</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*Adds all of the specified elements to the specified collection.</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">Parameters: This method takes the following argument as a parameter</span></span><br><span class="line"><span class="comment">c- the collection into which elements are to be inserted</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">elements- the elements to insert into c</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">Return Value: This method returns true if the collection changed as a result of the call.</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>

<p>The behavior of this convenience method is identical to that of c.addAll(Arrays.asList(elements)), but this method is likely to run significantly faster under most implementations.</p>
<p>· Collections.addAll()比arrays.addAll()方法快得多！</p>
]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>Arrays</tag>
        <tag>ArrayList</tag>
        <tag>Collection</tag>
      </tags>
  </entry>
  <entry>
    <title>HEXO 自建博客备份GitHub</title>
    <url>/2021/08/08/HEXO-manual/</url>
    <content><![CDATA[<h1 id="HEXO博客备份"><a href="#HEXO博客备份" class="headerlink" title="HEXO博客备份"></a>HEXO博客备份</h1><p>由于自己换了电脑，忘记博客备份，只能重新搭建。为防止以后发生同样的情况，特将相关笔记记录一下。</p>
<h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a><strong>参考链接</strong></h2><ul>
<li><a href="https://mupceet.com/2019/09/backup-hexo-blog/">https://mupceet.com/2019/09/backup-hexo-blog/</a></li>
</ul>
<h2 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a><strong>步骤</strong></h2><h3 id="初次备份"><a href="#初次备份" class="headerlink" title="初次备份"></a><strong>初次备份</strong></h3><p>按照以下步骤，详情可以看一下参考链接</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"><span class="built_in">cd</span> blog</span></span><br><span class="line"><span class="meta">$</span><span class="bash">git init</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">$</span><span class="bash">git submodule https://github.com/theme-next/hexo-theme-next.git themes/next</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">$</span><span class="bash">git add .</span></span><br><span class="line"><span class="meta">$</span><span class="bash">git commit -m <span class="string">&quot;init blog backup&quot;</span></span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 为了便于记忆 将main分支重命名为hexo分支 对应github.io中的备份分支hexo</span></span><br><span class="line"><span class="meta">$</span><span class="bash">git branch -m master hexo</span></span><br><span class="line"><span class="meta">$</span><span class="bash">git remote add origin https://github.com/XXX/XXX.github.io.git</span></span><br><span class="line"><span class="meta">$</span><span class="bash">git push -u origin hexo:hexo</span></span><br></pre></td></tr></table></figure>

<h3 id="初次备份后"><a href="#初次备份后" class="headerlink" title="初次备份后"></a><strong>初次备份后</strong></h3><ul>
<li><p><strong>博客网页部署</strong>按照<code>hexo g,  hexo s,   hexo d</code>等命令进行生成，浏览，部署</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">hexo g</span><br><span class="line">hexo s</span><br><span class="line">hexo d</span><br></pre></td></tr></table></figure></li>
<li><p><strong>博客源代码备份</strong> <code>hexo</code>分支按照日常使用的<code>git</code>命令，推送到<code>github</code>的<code>hexo</code>分支上</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git add xxx</span><br><span class="line">git commit -m &quot;backup&quot;</span><br><span class="line">git push origin hexo:hexo</span><br></pre></td></tr></table></figure></li>
</ul>
]]></content>
      <categories>
        <category>hexo</category>
      </categories>
  </entry>
  <entry>
    <title>《Kafka The Definitive Guide 2nd Edition》 PDF</title>
    <url>/2021/12/30/Kafka-The-Definitive-Guide-2nd-Edition/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <script id="hbeData" type="hbeData" data-hmacdigest="609d1ccf2611176bf684f9b568b1937af1ea2a25bbc2a14a5b2e379e26a2704d">b96ea2d34b1964c9b8d9ae3e4fcb836e766111610f30d5bdb3e44f23bf95a801798e4039618c7309b3a40a11d2eb1b657ded753e12adf6517693155a4bfb4b7d6c08eefd2b9c2304b0c2043836f3ad2de7b284b51f41b8e710767855fe7d34e72f8c74910e44762e8099e42f6c3cb0c19c3e5e1f7dda7a6157d84a68482bc4ca105d9aa5efa747163794207f7ddf996fdb31e497bcaf8e27e6ea7bdccc313612580feba680c785dc842213595273a96f47b6dc18c7b7228df846cb58375ad372e15602bea7f163c8d8ce25b03cf85ccf13345782026dc4b5cea8c4f65f2cb233d7f8e0ca62c15c90a86b6e9d5deadcb423362e23481269947c356c5222d7f3aeb6053a1c6d39e250ff443bb7a1b4378b98e588f28b8d101410bd88e44e221de84f8869b2a0111d320dd8ebd915b4af775310e42a12a78094155aa8ff44915cf99884518dfe61fc7da071e642c2193eac632f1476b31f208813badb618e140372</script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>kafka</category>
      </categories>
      <tags>
        <tag>kafka</tag>
        <tag>pdf</tag>
      </tags>
  </entry>
  <entry>
    <title>LinkedCaseInsensitveMap 大小写不敏感，用于数据库数据查询</title>
    <url>/2021/10/29/LinkedCaseInsensitveMap/</url>
    <content><![CDATA[<h1 id="LinkedCaseInsensitiveMap"><a href="#LinkedCaseInsensitiveMap" class="headerlink" title="LinkedCaseInsensitiveMap"></a><code>LinkedCaseInsensitiveMap</code></h1><h2 id="LinkedCaseInsensitiveMap-大小写不敏感"><a href="#LinkedCaseInsensitiveMap-大小写不敏感" class="headerlink" title="LinkedCaseInsensitiveMap 大小写不敏感"></a><code>LinkedCaseInsensitiveMap</code> 大小写不敏感</h2><p>在公司<code>debug</code>的时候，发现<code>Map&lt;String,Object&gt;</code> 类型的<code>Map</code> 对于大小写不敏感，后来看到<code>IDEA</code> 中对象的类型是<code>LinkedCaseInsensitiveMap</code>类型。<code>LinkedCaseInsensitiveMap</code>继承于<code>LinkedHashMap</code>，<code>LinkedCaseInsensitiveMap</code>可以检测关键字（不区分大小写）的唯一性，源码如下。</p>
<p><img src="/2021/10/29/LinkedCaseInsensitveMap/image-20211029081040884.png" alt="image-20211029081040884"></p>
<p><code>LinkedCaseInsensitiveMap</code>中有两个属性<code>LinkedHashMap&lt;String,V&gt; targetMap</code>和<code>HashMap&lt;String,String&gt; caseInsensitiveMap</code>。</p>
<p>输入值<code>Key,Value</code>， <code>CaseInsensitveMap</code>存储<code>小写Key, Key</code>，<code>targetMap</code> 存储<code>Key,Value</code>。</p>
<p><strong>源码</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LinkedCaseInsensitiveMap</span>&lt;<span class="title">V</span>&gt; <span class="keyword">implements</span> <span class="title">Map</span>&lt;<span class="title">String</span>, <span class="title">V</span>&gt;, <span class="title">Serializable</span>, <span class="title">Cloneable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">final</span> LinkedHashMap&lt;String, V&gt; targetMap;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">final</span> HashMap&lt;String, String&gt; caseInsensitiveKeys;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">final</span> Locale locale;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Nullable</span></span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">transient</span> <span class="keyword">volatile</span> Set&lt;String&gt; keySet;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Nullable</span></span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">transient</span> <span class="keyword">volatile</span> Collection&lt;V&gt; values;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Nullable</span></span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">transient</span> <span class="keyword">volatile</span> Set&lt;Entry&lt;String, V&gt;&gt; entrySet;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * caseInsensitiveKeys(HashMap类型) 将Key转换为小写，caseInsensitiveKeys存储 小写key -- Key</span></span><br><span class="line"><span class="comment">    * targetMap(LinkedHashMap类型) Key -- Value</span></span><br><span class="line"><span class="comment">    * 实例： </span></span><br><span class="line"><span class="comment">    * put(&quot;ABCDEF&quot;,2)</span></span><br><span class="line"><span class="comment">    * caseInsensitiveKeys: abcdef--&gt;ABCDEF</span></span><br><span class="line"><span class="comment">    * targetMap: ABCDEF--&gt; 2</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">	<span class="meta">@Nullable</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> V <span class="title">put</span><span class="params">(String key, <span class="meta">@Nullable</span> V value)</span> </span>&#123;</span><br><span class="line">		String oldKey = <span class="keyword">this</span>.caseInsensitiveKeys.put(convertKey(key), key);</span><br><span class="line">		V oldKeyValue = <span class="keyword">null</span>;</span><br><span class="line">		<span class="keyword">if</span> (oldKey != <span class="keyword">null</span> &amp;&amp; !oldKey.equals(key)) &#123;</span><br><span class="line">			oldKeyValue = <span class="keyword">this</span>.targetMap.remove(oldKey);</span><br><span class="line">		&#125;</span><br><span class="line">		V oldValue = <span class="keyword">this</span>.targetMap.put(key, value);</span><br><span class="line">		<span class="keyword">return</span> (oldKeyValue != <span class="keyword">null</span> ? oldKeyValue : oldValue);</span><br><span class="line">	&#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">	<span class="meta">@Nullable</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> V <span class="title">get</span><span class="params">(Object key)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">if</span> (key <span class="keyword">instanceof</span> String) &#123;</span><br><span class="line">			String caseInsensitiveKey = <span class="keyword">this</span>.caseInsensitiveKeys.get(convertKey((String) key));</span><br><span class="line">			<span class="keyword">if</span> (caseInsensitiveKey != <span class="keyword">null</span>) &#123;</span><br><span class="line">				<span class="keyword">return</span> <span class="keyword">this</span>.targetMap.get(caseInsensitiveKey);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">	&#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">protected</span> String <span class="title">convertKey</span><span class="params">(String key)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> key.toLowerCase(getLocale());</span><br><span class="line">	&#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>java</category>
      </categories>
  </entry>
  <entry>
    <title>Spring Framework Documentation</title>
    <url>/2021/08/15/Spring-Framework-Documentation/</url>
    <content><![CDATA[<h1 id="控制反转-IoC"><a href="#控制反转-IoC" class="headerlink" title="控制反转 IoC"></a>控制反转 IoC</h1><p>控制反转（IoC，Inversion of Control )，也被称为依赖注入（DI，dependency injection）。</p>
<p>基础类：<code>org.springframework.beans</code>和<code>org.springframework.context</code></p>
<p>BeanFactory接口 –  public interface ListableBeanFactory extends BeanFactory –  子接口 ApplicationContext  interface ApplicationContext extends EnvironmentCapable, ListableBeanFactory, HierarchicalBeanFactory,<br>        MessageSource, ApplicationEventPublisher, ResourcePatternResolver</p>
<p>ApplicationContext是BeanFactory的superset</p>
<p>Spring, In Spring, the objects that form the backbone of your application and that are managed by the Spring IoC container are called beans. .</p>
<p>A bean is an object that is instantiated, assembled, and managed by a Spring IoC container.</p>
<p>org.springframework.context.ApplicationContext 接口代表了IoC容器，负责实例化、配置和装配beans.</p>
<p>在stand-alone应用中，一般使用<a href="https://docs.spring.io/spring-framework/docs/5.3.9/javadoc-api/org/springframework/context/support/ClassPathXmlApplicationContext.html"><code>ClassPathXmlApplicationContext</code></a> or <a href="https://docs.spring.io/spring-framework/docs/5.3.9/javadoc-api/org/springframework/context/support/FileSystemXmlApplicationContext.html"><code>FileSystemXmlApplicationContext</code></a></p>
<p>支持XML、Java Annotation等方式，可以通过少量 XML方式来说明支持注解方式。</p>
<p><img src="/2021/08/15/Spring-Framework-Documentation/container-magic.png" alt="container magic"></p>
]]></content>
      <categories>
        <category>spring</category>
      </categories>
      <tags>
        <tag>spring</tag>
      </tags>
  </entry>
  <entry>
    <title>git fetch git pull 对比</title>
    <url>/2021/08/20/git-fetch-git-pull/</url>
    <content><![CDATA[<p>参考链接：</p>
<ul>
<li><a href="https://www.cnblogs.com/Venom/p/5477367.html">https://www.cnblogs.com/Venom/p/5477367.html</a></li>
<li><a href="https://www.jianshu.com/p/a5c4d2f99807">https://www.jianshu.com/p/a5c4d2f99807</a></li>
<li><a href="https://ruby-china.org/topics/4768">https://ruby-china.org/topics/4768</a></li>
<li></li>
</ul>
<h1 id="Git-Fetch"><a href="#Git-Fetch" class="headerlink" title="Git Fetch"></a>Git Fetch</h1><p>理解 <code>fetch</code> 的关键， 是理解 <code>FETCH_HEAD</code>。</p>
<p><code>FETCH_HEAD</code>指的是： <code>某个branch在服务器上的最新状态</code>。每一个执行过<code>fetch</code>操作的项目都会存在一个<code>FETCH_HEAD</code>列表，<br>这个列表保存在 <code>.git/FETCH_HEAD</code> 文件中， 其中每一行对应于远程服务器的一个分支。<br><strong><code>FETCH_HEAD</code>当前指向的远程分支就是这个文件第一行对应的那个分支</strong>。如下图所示，当前<code>FETCH_HEAD</code> 指向远程分支 <code>3.0.x</code>。</p>
<p><img src="/2021/08/20/git-fetch-git-pull/image-20210822110945856.png" alt="image-20210822110945856"></p>
<h2 id="常用方法"><a href="#常用方法" class="headerlink" title="常用方法"></a>常用方法</h2><p>常见的<code>git fetch</code> 使用方式包含以下四种：</p>
<h3 id="git-fetch"><a href="#git-fetch" class="headerlink" title="git fetch"></a><strong><code>git fetch</code></strong></h3><p>这一步其实是执行了两个关键操作：<br>第一步：创建并更新所有远程分支的本地远程分支。即创建并更新<code>origin/xxx</code>分支，拉取代码到<code>origin/xxx</code>分支上。<br>第二步：设定<code>FETCH_HEAD</code>为远程服务器的<code>origin/当前分支</code>。例如，当前分支为<code>main</code> 分支，<code>git fetch</code>命令后，<code>FETCH_HEAD</code>对应<code>origin/main</code>。后期可以使用<code>git merge FETCH_HEAD</code>命令，合并本地<code>main</code> 分支和<code>FETCH_HEAD</code>远程拉取下来的<code>origin/main</code>。</p>
<p>需要注意的是： 和<code>push</code>不同， <code>fetch</code>会自动获取远程新加入的分支，拉取当前项目的所有分支的<code>commit</code>。</p>
<p><img src="/2021/08/20/git-fetch-git-pull/image-20210822103443321.png" alt="image-20210822103443321"></p>
<h3 id="git-fetch-origin"><a href="#git-fetch-origin" class="headerlink" title="git fetch origin"></a><strong><code>git fetch origin</code></strong></h3><p>同上， 只不过手动指定了remote。</p>
<p><img src="/2021/08/20/git-fetch-git-pull/image-20210822111609139.png" alt="image-20210822111609139"></p>
<h3 id="git-fetch-origin-branch1"><a href="#git-fetch-origin-branch1" class="headerlink" title="git fetch origin branch1"></a><strong><code>git fetch origin branch1</code></strong></h3><p>设定当前分支的 <code>FETCH_HEAD</code> 为远程服务器的<code>branch1</code>分支。</p>
<p>注意： 在这种情况下， 不会在本地创建本地远程分支， 这是因为：</p>
<p>这个操作是<code>git pull origin branch1</code>的第一步， 而对应的<code>pull</code>操作，并不会在本地创建新的<code>branch</code>。</p>
<p>一个附加效果是：</p>
<p>这个命令可以用来测试远程主机的远程分支<code>branch1</code>是否存在， 如果存在， 返回0， 如果不存在， 返回128， 抛出一个异常。</p>
<p><img src="/2021/08/20/git-fetch-git-pull/image-20210822104901851.png" alt="image-20210822104901851"></p>
<h3 id="git-fetch-origin-branch1-branch2"><a href="#git-fetch-origin-branch1-branch2" class="headerlink" title="git fetch origin branch1:branch2"></a><strong><code>git fetch origin branch1:branch2</code></strong></h3><p>只要明白了上面的含义， 这个就很简单了，</p>
<ul>
<li><p>首先执行上面的<code>fetch</code>操作</p>
</li>
<li><p>使用远程<code>branch1</code>分支在本地创建<code>branch2</code>(但不会切换到该分支)，<br>如果本地不存在<code>branch2</code>分支， 则会自动创建一个新的<code>branch2</code>分支，<br>如果本地存在<code>branch2</code>分支， 并且是<code>fast forward</code>， 则自动合并两个分支， 否则， 会阻止以上操作。</p>
<p><img src="/2021/08/20/git-fetch-git-pull/image-20210822105955364.png" alt="image-20210822105955364"></p>
</li>
</ul>
<h1 id="Git-Pull"><a href="#Git-Pull" class="headerlink" title="Git Pull"></a>Git Pull</h1><p>只要理解了<code>git fetch</code>， <code>git pull</code>就太简单了。</p>
<p><code>git pull</code> 等价于以下两步：</p>
<ul>
<li>经命令中的<code>pull</code>换成<code>fetch</code>， 执行</li>
<li><code>git merge FETCH_HEAD</code></li>
</ul>
]]></content>
      <categories>
        <category>git</category>
      </categories>
      <tags>
        <tag>git</tag>
        <tag>manual</tag>
      </tags>
  </entry>
  <entry>
    <title>《Redis开发与运维》PDF</title>
    <url>/2021/12/31/Redis-DevOps/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <script id="hbeData" type="hbeData" data-hmacdigest="0a81862bd2db6007cecc77b9621d21f394799141c603d91dfb60c88a798f3ff0">b96ea2d34b1964c9b8d9ae3e4fcb836ebda2eb645f9f733ceaa8bfc3f6f380960260492b5f64123347f1bd016fafd8787c1a261bbca7ca4484469cc9178e2a35fa147b99d7dbc82671460758d7ae122962ef862eb98d067c32681d79b0c0581e360c41aef5082019ad34216c86f4990c2732756ae6948856045b96e4cc9bfd2a</script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>redis</category>
      </categories>
      <tags>
        <tag>redis</tag>
        <tag>pdf</tag>
      </tags>
  </entry>
  <entry>
    <title>HEXO 博客显示PDF，并控制博客访问权限</title>
    <url>/2021/12/31/hexo-pdf-security/</url>
    <content><![CDATA[<h1 id="HEXO博客中插入PDF"><a href="#HEXO博客中插入PDF" class="headerlink" title="HEXO博客中插入PDF"></a>HEXO博客中插入PDF</h1><h2 id="config-yml文件修改"><a href="#config-yml文件修改" class="headerlink" title="_config.yml文件修改"></a>_config.yml文件修改</h2><p>将hexo博客根目录下<code>_config.yml</code>配置文件中的<code>post_asset_folder</code>选项设置为<code>true</code>  </p>
<p>该选项的功能说明如下:<br><code>当设置post_asset_folder为true参数后，在建立文件时，Hexo会自动建立一个与文章同名的文件夹，可以把与该文章相关的所有资源都放到那个文件夹，更方便的使用资源。</code></p>
<h2 id="新建一篇文章并插入PDF"><a href="#新建一篇文章并插入PDF" class="headerlink" title="新建一篇文章并插入PDF"></a>新建一篇文章并插入PDF</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ hexo new &lt;article name&gt;</span><br></pre></td></tr></table></figure>

<p>在<code>source/_post</code>文件夹下，会生成<code>&lt;article name&gt;.md</code>和<code>&lt;article name&gt;</code>文件夹。将想要显示的PDF 放到<code>&lt;article name&gt;</code>文件夹下，并在<code>&lt;article name&gt;.md</code> 文章，插入如下代码：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;object data=<span class="string">&quot;XXX.pdf&quot;</span>  type=<span class="string">&quot;application/pdf&quot;</span> width=<span class="string">&quot;100%&quot;</span> height=<span class="string">&quot;877px&quot;</span>&gt;</span><br></pre></td></tr></table></figure>

<p>然后通过<code>hexo g </code>和<code>hexo s</code>查看显示效果。</p>
<h1 id="HEXO设置文章访问密码"><a href="#HEXO设置文章访问密码" class="headerlink" title="HEXO设置文章访问密码"></a>HEXO设置文章访问密码</h1><p>因为有一些PDF涉及版权，或者自己有一些文章不便于面向互联网发布。可以通过设置访问密码的方式控制文章的访问权限。  </p>
<p>主要用到的是<code>hexo-blog-encrypt</code> ，开源项目地址链接为：<a href="https://github.com/D0n9X1n/hexo-blog-encrypt/blob/master/ReadMe.zh.md">https://github.com/D0n9X1n/hexo-blog-encrypt/blob/master/ReadMe.zh.md</a></p>
]]></content>
      <categories>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>manual</tag>
      </tags>
  </entry>
  <entry>
    <title>mysql</title>
    <url>/2022/01/05/mysql/</url>
    <content><![CDATA[<p>参考资料：</p>
<ul>
<li><code>MySQL</code>必知必会</li>
</ul>
<h1 id="Mysql-基本概念"><a href="#Mysql-基本概念" class="headerlink" title="Mysql 基本概念"></a>Mysql 基本概念</h1><h2 id="数据库"><a href="#数据库" class="headerlink" title="数据库"></a>数据库</h2><p>数据库（database） 保存有组织的数据的容器（通常是一个文件或一组文件）。</p>
<h2 id="表"><a href="#表" class="headerlink" title="表"></a>表</h2><p>表（table） 某种特定类型数据的结构化清单。</p>
<h2 id="模式"><a href="#模式" class="headerlink" title="模式"></a>模式</h2><p>模式（schema） 关于数据库和表的布局及特性的信息。</p>
<h2 id="主键"><a href="#主键" class="headerlink" title="主键"></a>主键</h2><p>主键（primary key）：一列（或一组列），其值能够唯一区分表中每个行。表中的任何列都可以作为主键，只要它满足以下条件：</p>
<ul>
<li>任意两行都不具有相同的主键值；</li>
<li><strong>每个行都必须具有一个主键值（主键列不允许NULL值）。</strong></li>
</ul>
<p>应该坚持的几个普遍认可的最好习惯为：</p>
<ul>
<li>不更新主键列中的值；</li>
<li>不重用主键列的值；</li>
<li>不在主键列中使用可能会更改的值。（例如，如果使用一个名字作为主键以标识某个供应商，当该供应商合并和更改其名字时，必须更改这个主键。）</li>
</ul>
<h1 id="DBMS"><a href="#DBMS" class="headerlink" title="DBMS"></a>DBMS</h1><p>数据的所有存储、检索、管理和处理实际上是由数据库软件——DBMS（数据库管理系统）完成的。MySQL是一种DBMS，即它是一种数据库软件。</p>
<p>DBMS可分为两类：一类为基于共享文件系统的DBMS，另一类为基于客户机—服务器的DBMS。前者（包括诸如Microsoft Access和FileMaker）用于桌面用途，通常不用于高端或更关键的应用。MySQL、Oracle以及Microsoft SQL Server等数据库是基于客户机—服务器的数据库。客户机—服务器应用分为两个不同的部分。服务器部分是负责所有数据访问和处理的一个软件。这个软件运行在称为数据库服务器的计算机上。与数据文件打交道的只有服务器软件。关于数据、数据添加、删除和数据更新的所有请求都由服务器软件完成。这些请求或更改来自运行客户机软件的计算机。客户机是与用户打交道的软件。</p>
<h1 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h1><h2 id="显示所有数据库"><a href="#显示所有数据库" class="headerlink" title="显示所有数据库"></a>显示所有数据库</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">show databases;</span><br></pre></td></tr></table></figure>

<h2 id="显示所有表"><a href="#显示所有表" class="headerlink" title="显示所有表"></a>显示所有表</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">show tables;</span><br></pre></td></tr></table></figure>

<h2 id="显示具体一个表中的所有列"><a href="#显示具体一个表中的所有列" class="headerlink" title="显示具体一个表中的所有列"></a>显示具体一个表中的所有列</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">show columns from &lt;table_name&gt;;</span><br><span class="line">describe &lt;table_name&gt;;</span><br></pre></td></tr></table></figure>

<p>![](mysql/show columns from table_name.png)</p>
<h2 id="显示服务器的状态信息"><a href="#显示服务器的状态信息" class="headerlink" title="显示服务器的状态信息"></a>显示服务器的状态信息</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">show status;</span><br></pre></td></tr></table></figure>

<h2 id="显示创建特定数据库或表的MySQL语句"><a href="#显示创建特定数据库或表的MySQL语句" class="headerlink" title="显示创建特定数据库或表的MySQL语句"></a>显示创建特定数据库或表的MySQL语句</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">show create table &lt;table_name&gt;;</span><br><span class="line">show create database &lt;database_name&gt;;</span><br></pre></td></tr></table></figure>

<h2 id="显示授予用户的安全权限"><a href="#显示授予用户的安全权限" class="headerlink" title="显示授予用户的安全权限"></a>显示授予用户的安全权限</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">show grants;</span><br></pre></td></tr></table></figure>

<h2 id="显示服务器错误或警告信息"><a href="#显示服务器错误或警告信息" class="headerlink" title="显示服务器错误或警告信息"></a>显示服务器错误或警告信息</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">show errors;</span><br><span class="line">show warnings;</span><br></pre></td></tr></table></figure>

<h1 id="关键字"><a href="#关键字" class="headerlink" title="关键字"></a>关键字</h1><h2 id="DISTINCT"><a href="#DISTINCT" class="headerlink" title="DISTINCT"></a>DISTINCT</h2><p>不能部分使用DISTINCT，DISTINCT关键字应用于所有列而不仅仅是它的前置列。</p>
<p>可以使用具有多个列的<code>DISTINCT</code>子句。 在这种情况下，<code>MySQL</code>使用所有列的组合来确定结果集中行的唯一性。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 取不同的column_1</span><br><span class="line">select distinct &lt;column_1&gt; from &lt;tbl_name&gt;;</span><br><span class="line"># 除非指定的两个列都不同，否则所有的行都会被检索出来</span><br><span class="line">select distinct &lt;column_1,column_2&gt; from &lt;tbl_name&gt;;</span><br></pre></td></tr></table></figure>

<h2 id="LIMIT"><a href="#LIMIT" class="headerlink" title="LIMIT"></a>LIMIT</h2><p>根据查询条件查询一定数量的数据<strong>（limit 后只有一个参数）</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 根据查询条件 检索出&lt;record_nums&gt;条数据 </span><br><span class="line">select &lt;column_name&gt; from &lt;table_name&gt; limit &lt;record_nums&gt;;</span><br></pre></td></tr></table></figure>



<p>限定返回数据的位置，及其后面显示的行数。<strong>（limit后有两个参数）</strong></p>
<p>start_position: 检索出来的第一行为第0行，开始检索的位置</p>
<p>record_nums: 检索出的数据条数</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"># 从行&lt;start_position&gt;开始 检索出&lt;record_nums&gt;行</span><br><span class="line">select &lt;column_name&gt;</span><br><span class="line">from &lt;table_name&gt; </span><br><span class="line">limit &lt;start_position&gt;,&lt;record_nums&gt;;</span><br></pre></td></tr></table></figure>

<h2 id="ORDER-BY"><a href="#ORDER-BY" class="headerlink" title="ORDER BY"></a>ORDER BY</h2><p>通常，ORDER BY子句中使用的列将是为显示所选择的列。但是，实际上并不一定要这样，用非检索的列排序数据是完全合法的。</p>
<h2 id="WHERE"><a href="#WHERE" class="headerlink" title="WHERE"></a>WHERE</h2><h3 id="空值检查NULL"><a href="#空值检查NULL" class="headerlink" title="空值检查NULL"></a>空值检查NULL</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># IS NULL 子句</span><br><span class="line">select &lt;column_name&gt; from &lt;table_name&gt; where &lt;column_name&gt; IS NULL;</span><br></pre></td></tr></table></figure>

<p><strong>NULL与不匹配</strong> 在通过过滤选择出不具有特定值的行时，你可能希望返回具有NULL值的行。但是，不行。因为未知具有特殊的含义，数据库不知道它们是否匹配，所以在匹配过滤或不匹配过滤时不返回它们。因此，在过滤数据时，一定要验证返回数据中确实给出了被过滤列具有NULL的行。</p>
<h3 id="AND-OR"><a href="#AND-OR" class="headerlink" title="AND OR"></a>AND OR</h3><p>AND的优先级高于OR优先级</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 优先处理AND操作符</span><br><span class="line"># 含义：由供应商1003制造的任何价格为10美元（含）以上的产品或者由供应商1002制造的任何产品</span><br><span class="line">select prod_name,prod_price</span><br><span class="line">from products</span><br><span class="line">where vend_id=1002 or vend_id = 1003 and prod_price&gt;=10;</span><br></pre></td></tr></table></figure>

<h2 id="通配符"><a href="#通配符" class="headerlink" title="% 通配符"></a>% 通配符</h2><ul>
<li>除了一个或多个字符外，%还能匹配0个字符。%代表搜索模式中给定位置的0个、1个或多个字符。</li>
<li>虽然似乎%通配符可以匹配任何东西，但有一个例外，即NULL。即使是WHERE prod_name LIKE ‘%’也不能匹配用值NULL作为产品名的行。</li>
</ul>
<h2 id="下划线-通配符"><a href="#下划线-通配符" class="headerlink" title="下划线_ 通配符"></a>下划线_ 通配符</h2><ul>
<li>下划线的用途与%一样，但下划线只匹配单个字符而不是多个字符。</li>
<li></li>
</ul>
<h1 id="正则表达式"><a href="#正则表达式" class="headerlink" title="正则表达式"></a>正则表达式</h1><p><strong>正则表达式匹配的是列值，LIKE匹配的是整个列</strong>，示例：</p>
<p>prod_name全部数据，如下图所示：</p>
<p>![正则表达式否定开始全量数据](mysql/regexp all datas.png)</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 在列值中匹配具有非数字 非特殊字符. 的列</span><br><span class="line">select prod_name from products</span><br><span class="line">where prod_name regexp &#x27;[^0-9\\.]&#x27;</span><br></pre></td></tr></table></figure>

<img src="/2022/01/05/mysql/Users/TingHL/AppData/Roaming/Typora/typora-user-images/image-20220120213342814.png" alt="image-20220120213342814" style="zoom: 80%;">

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 在列值中匹配 非数字非特殊字符. 开头的数字</span><br><span class="line">select prod_name</span><br><span class="line">from products where prod_name regexp &#x27;^[^0-9\\.]&#x27;</span><br></pre></td></tr></table></figure>

<p><img src="/2022/01/05/mysql/%E5%BC%80%E5%A7%8B%E9%9D%9E0%E9%9D%9E9.png" alt="image-20220120213504774"></p>
<h2 id="否定-开始"><a href="#否定-开始" class="headerlink" title="否定 / 开始  ^"></a>否定 / 开始  ^</h2><p>^有两种用法。在集合中（用[和]定义），用它来否定该集合，否则，用来指串的开始处。</p>
<h2 id="匹配特殊字符-为前导"><a href="#匹配特殊字符-为前导" class="headerlink" title="匹配特殊字符 \\为前导"></a>匹配特殊字符 <code>\\</code>为前导</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 查找 特殊字符 - </span><br><span class="line">select vend_name from venders where vend_name regexp &#x27;\\-&#x27;</span><br></pre></td></tr></table></figure>

<h2 id="匹配字符类"><a href="#匹配字符类" class="headerlink" title="匹配字符类"></a>匹配字符类</h2><p><img src="/2022/01/05/mysql/%E5%8C%B9%E9%85%8D%E5%AD%97%E7%AC%A6%E7%B1%BB.png" alt="匹配字符类"></p>
<p><img src="/2022/01/05/mysql/%E9%87%8D%E5%A4%8D%E5%85%83%E5%AD%97%E7%AC%A6.png" alt="重复元字符"></p>
<p>定位元字符匹配特定位置的文本。</p>
<p><img src="/2022/01/05/mysql/%E5%AE%9A%E4%BD%8D%E5%85%83%E5%AD%97%E7%AC%A6.png" alt="image-20220120211750469"></p>
<h1 id="计算字段"><a href="#计算字段" class="headerlink" title="计算字段"></a>计算字段</h1><h2 id="拼接字段"><a href="#拼接字段" class="headerlink" title="拼接字段"></a>拼接字段</h2><p>concat() 函数：一个或多个指定的串，各个串之间用逗号分隔。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select concat(vend_name,&#x27;(&#x27;,vend_country,&#x27;)&#x27;)</span><br><span class="line">from vendors order by vend_name;</span><br></pre></td></tr></table></figure>

<h1 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h1><h2 id="文本函数"><a href="#文本函数" class="headerlink" title="文本函数"></a>文本函数</h2><table>
<thead>
<tr>
<th>函 数</th>
<th align="left">说 明</th>
</tr>
</thead>
<tbody><tr>
<td>Left()</td>
<td align="left">返回串左边的字符</td>
</tr>
<tr>
<td>Length()</td>
<td align="left">返回串的长度</td>
</tr>
<tr>
<td>Locate()</td>
<td align="left">找出串的一个子串</td>
</tr>
<tr>
<td>Lower()</td>
<td align="left">将串转换为小写</td>
</tr>
<tr>
<td>LTrim()</td>
<td align="left">去掉串左边的空格</td>
</tr>
<tr>
<td>Right()</td>
<td align="left">返回串右边的字符</td>
</tr>
<tr>
<td>RTrim()</td>
<td align="left">去掉串右边的空格</td>
</tr>
<tr>
<td>Soundex()</td>
<td align="left">返回串的SOUNDEX值，将任何文本字符串转换为描述其语音表示的字母数字模式的算法</td>
</tr>
<tr>
<td>SubString()</td>
<td align="left">返回子串的字符</td>
</tr>
<tr>
<td>Upper()</td>
<td align="left">将串转换为大写</td>
</tr>
</tbody></table>
<h2 id="数值函数"><a href="#数值函数" class="headerlink" title="数值函数"></a>数值函数</h2><p>数值处理函数仅处理数值数据。这些函数一般主要用于代数、三角<br>或几何运算，因此没有串或日期—时间处理函数的使用那么频繁。</p>
<table>
<thead>
<tr>
<th>函 数</th>
<th>说 明</th>
</tr>
</thead>
<tbody><tr>
<td>Abs()</td>
<td>返回一个数的绝对值</td>
</tr>
<tr>
<td>Cos()</td>
<td>返回一个角度的余弦</td>
</tr>
<tr>
<td>Exp()</td>
<td>返回一个数的指数值</td>
</tr>
<tr>
<td>Mod()</td>
<td>返回除操作的余数</td>
</tr>
<tr>
<td>Pi()</td>
<td>返回圆周率</td>
</tr>
<tr>
<td>Rand()</td>
<td>返回一个随机数</td>
</tr>
<tr>
<td>Sin()</td>
<td>返回一个角度的正弦</td>
</tr>
<tr>
<td>Sqrt()</td>
<td>返回一个数的平方根</td>
</tr>
<tr>
<td>Tan()</td>
<td>返回一个角度的正切</td>
</tr>
</tbody></table>
<h2 id="日期和时间函数"><a href="#日期和时间函数" class="headerlink" title="日期和时间函数"></a>日期和时间函数</h2><p>日期和时间采用相应的数据类型和特殊的格式存储，以便能快速和有效地排序或过滤，并且节省物理存储空间。</p>
<table>
<thead>
<tr>
<th>函 数</th>
<th>说 明</th>
</tr>
</thead>
<tbody><tr>
<td>AddDate()</td>
<td>增加一个日期（天、周等）</td>
</tr>
<tr>
<td>AddTime()</td>
<td>增加一个时间（时、分等）</td>
</tr>
<tr>
<td>CurDate()</td>
<td>返回当前日期</td>
</tr>
<tr>
<td>CurTime()</td>
<td>返回当前时间</td>
</tr>
<tr>
<td>Date()</td>
<td>返回日期时间的日期部分。例如Date(‘2005-09-01 11:30:05’) 取值为 ‘2005-09-01’。</td>
</tr>
<tr>
<td>DateDiff()</td>
<td>计算两个日期之差</td>
</tr>
<tr>
<td>Date_Add()</td>
<td>高度灵活的日期运算函数</td>
</tr>
<tr>
<td>Date_Format()</td>
<td>返回一个格式化的日期或时间串</td>
</tr>
<tr>
<td>Day()</td>
<td>返回一个日期的天数部分</td>
</tr>
<tr>
<td>DayOfWeek()</td>
<td>对于一个日期，返回对应的星期几</td>
</tr>
<tr>
<td>Hour()</td>
<td>返回一个时间的小时部分</td>
</tr>
<tr>
<td>Minute()</td>
<td>返回一个时间的分钟部分</td>
</tr>
<tr>
<td>Month()</td>
<td>返回一个日期的月份部分</td>
</tr>
<tr>
<td>Now()</td>
<td>返回当前日期和时间</td>
</tr>
<tr>
<td>Second()</td>
<td>返回一个时间的秒部分</td>
</tr>
<tr>
<td>Time()</td>
<td>返回一个日期时间的时间部分</td>
</tr>
<tr>
<td>Year()</td>
<td>返回一个日期的年份部分</td>
</tr>
</tbody></table>
<h2 id="聚集函数"><a href="#聚集函数" class="headerlink" title="聚集函数"></a>聚集函数</h2><table>
<thead>
<tr>
<th>函 数</th>
<th>说 明</th>
</tr>
</thead>
<tbody><tr>
<td>AVG()</td>
<td>返回某列的平均值. AVG()通过对表中行数计数并计算特定列值之和，求得该列的平均值。AVG()可用来返回所有列的平均值，也可以用来返回特定列或行的平均值。AVG()函数忽略列值为NULL的行(不加和 不平均 忽略该行数据)。</td>
</tr>
<tr>
<td>COUNT()</td>
<td>返回某列的行数.<br>使用COUNT(*)对表中行的数目进行计数，不管表列中包含的是空值（NULL）还是非空值。<br>使用COUNT(column)对特定列中具有值的行进行计数，忽略NULL值。</td>
</tr>
<tr>
<td>MAX()</td>
<td>返回某列的最大值. MAX()函数忽略列值为NULL的行。</td>
</tr>
<tr>
<td>MIN()</td>
<td>返回某列的最小值. MIN()函数忽略列值为NULL的行。</td>
</tr>
<tr>
<td>SUM()</td>
<td>返回某列值之和. SUM()函数忽略列值为NULL的行。</td>
</tr>
</tbody></table>
<p>利用标准的算术操作符，所有聚集函数都可用来执行多个列上的计算。</p>
<p>例如:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select sum(item_price*item_quantity) as total_price</span><br><span class="line">from orderitems</span><br><span class="line">where order_num=20005;</span><br></pre></td></tr></table></figure>

<p>以上5个聚集函数都可以如下使用：</p>
<ul>
<li>对所有的行执行计算，指定ALL参数或不给参数（因为ALL是默认行为）；</li>
<li>只包含不同的值，指定DISTINCT参数。</li>
</ul>
<h1 id="group-by-分组-having-过滤"><a href="#group-by-分组-having-过滤" class="headerlink" title="group by 分组, having 过滤"></a>group by 分组, having 过滤</h1><p>GROUP BY子句指示MySQL分组数据，然后对每个组而不是<br>整个结果集进行聚集。<br>在具体使用GROUP BY子句前，需要知道一些重要的规定。</p>
<ul>
<li>GROUP BY子句可以包含任意数目的列。这使得能对分组进行嵌套，为数据分组提供更细致的控制。</li>
<li>如果在GROUP BY子句中嵌套了分组，数据将在最后规定的分组上进行汇总。换句话说，在建立分组时，指定的所有列都一起计算（所以不能从个别的列取回数据）。</li>
<li>GROUP BY子句中列出的每个列都必须是检索列或有效的表达式（但不能是聚集函数）。如果在SELECT中使用表达式，则必须在GROUP BY子句中指定相同的表达式。不能使用别名。</li>
<li><strong>除聚集计算语句外，SELECT语句中的每个列都必须在GROUP BY子句中给出</strong>。</li>
<li>如果分组列中具有NULL值，则NULL将作为一个分组返回。如果列中有多行NULL值，它们将分为一组。</li>
<li>GROUP BY子句必须出现在WHERE子句之后，ORDER BY子句之前。</li>
</ul>
<p><strong>在MYSQL中使用GROUP BY对表中的数据进行分组时，</strong><br><strong>GROUP BY X意思是将所有具有相同X字段值的记录放到一个分组里，</strong><br><strong>GROUP BY X, Y意思是将所有具有相同X字段值和Y字段值的记录放到一个分组里。</strong></p>
<p>ORDER BY与GROUP BY 差别</p>
<table>
<thead>
<tr>
<th>ORDER BY</th>
<th>GROUP BY</th>
</tr>
</thead>
<tbody><tr>
<td>排序产生的输出</td>
<td>分组行。但输出可能不是分组的顺序</td>
</tr>
<tr>
<td>任意列都可以使用（甚至非选择的列也可以使用）</td>
<td><strong>只可能使用选择列或表达式列，而且必须使用每个选择列表达式</strong></td>
</tr>
<tr>
<td>不一定需要</td>
<td>如果与聚集函数一起使用列（或表达式），则必须使用</td>
</tr>
</tbody></table>
<h1 id="联结"><a href="#联结" class="headerlink" title="联结"></a>联结</h1><p>联结：多个表之间关联</p>
<p>笛卡儿积（cartesian product） 由没有联结条件的表关系返回的结果为笛卡儿积。检索出的行的数目将是第一个表中的行数乘以第二个表中的行数。</p>
<h2 id="内部联结（等值连接）"><a href="#内部联结（等值连接）" class="headerlink" title="内部联结（等值连接）"></a>内部联结（等值连接）</h2><p>基于两个表之间的相等测试</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select *</span><br><span class="line">from &lt;table_name1&gt; inner join &lt;table_name1&gt; </span><br><span class="line">on &lt;table_name1&gt;.column = &lt;table_name2&gt;.column;</span><br><span class="line"></span><br><span class="line">select * from &lt;table_name1&gt;,&lt;table_name1&gt; </span><br><span class="line">where &lt;table_name1&gt;.column = &lt;table_name2&gt;.column;</span><br></pre></td></tr></table></figure>

<h2 id="自联结"><a href="#自联结" class="headerlink" title="自联结"></a>自联结</h2><h2 id="自然联结"><a href="#自然联结" class="headerlink" title="自然联结"></a>自然联结</h2><h2 id="外部联结"><a href="#外部联结" class="headerlink" title="外部联结"></a>外部联结</h2><h1 id="组合查询"><a href="#组合查询" class="headerlink" title="组合查询"></a>组合查询</h1><p>许执行多个查询（多条SELECT语句），并将结果作为单个查询结果集返回。有两种基本情况，其中需要使用组合查询：</p>
<ul>
<li>在单个查询中从不同的表返回类似结构的数据；</li>
<li>对单个表执行多个查询，按单个查询返回数据。</li>
</ul>
<p>UNION的使用很简单。所需做的只是给出每条SELECT语句，在各条语句之间放上关键字UNION。</p>
<p><strong>Union规则</strong></p>
<ul>
<li>UNION必须由两条或两条以上的SELECT语句组成，语句之间用关键字UNION分隔（因此，如果组合4条SELECT语句，将要使用3个UNION关键字）。</li>
<li>UNION中的每个查询必须包含相同的列、表达式或聚集函数（不过各个列不需要以相同的次序列出）。</li>
<li>列数据类型必须兼容：类型不必完全相同，但必须是DBMS可以隐含地转换的类型（例如，不同的数值类型或不同的日期类型）。</li>
</ul>
<p><strong>UNION ALL</strong></p>
<p>使用UNION ALL，MySQL不取消重复的行。</p>
<p><strong>组合查询结果排序</strong></p>
<p>SELECT语句的输出用ORDER BY子句排序。在用UNION组合查询时，只能使用一条ORDER BY子句，它必须出现在最后一条SELECT语句之后。</p>
<h1 id="全文索引"><a href="#全文索引" class="headerlink" title="全文索引"></a>全文索引</h1><p>为了进行全文索引，MySQL根据子句FULLTEXT(note_text)的指示对它进行索引。FULLTEXT 索引单个列，也可以指定多个列。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">CREATE TABLE `productnotes2` (</span><br><span class="line">  `note_id` int NOT NULL AUTO_INCREMENT,</span><br><span class="line">  `prod_id` char(10) NOT NULL,</span><br><span class="line">  `note_date` datetime NOT NULL,</span><br><span class="line">  `note_text` text,</span><br><span class="line">  PRIMARY KEY (`note_id`),</span><br><span class="line">  FULLTEXT KEY `note_text` (`note_text`)</span><br><span class="line">) ENGINE=InnoDB AUTO_INCREMENT=115 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci</span><br></pre></td></tr></table></figure>

<p>在定义之后，MySQL 自动维护改索引。在增加、更新或删除行时，索引随之自动更新。</p>
<h2 id="Match-Against"><a href="#Match-Against" class="headerlink" title="Match() Against()"></a>Match() Against()</h2><p>使用Match()和Against() 执行全文搜索，Match() 指定被索引的列，Against()指定要使用的索引表达式。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select note_text</span><br><span class="line">from productnotes</span><br><span class="line">where match(note_text) against(&#x27;rabit&#x27;);</span><br></pre></td></tr></table></figure>

<p>使用完整的Match() 说明 传递给Match() 的值必须与FULLTEXT()定义中的相同。如果指定多个列，则必须列出它们（而且次序正确）。</p>
<h2 id="拓展查询"><a href="#拓展查询" class="headerlink" title="拓展查询"></a>拓展查询</h2><p>在使用查询扩展时，MySQL对数据和索引进行两遍扫描来完成搜索：</p>
<ul>
<li>首先，进行一个基本的全文本搜索，找出与搜索条件匹配的所有行；</li>
<li>其次，MySQL检查这些匹配行并选择所有有用的词。</li>
<li>再其次，MySQL再次进行全文本搜索，这次不仅使用原来的条件，而且还使用所有有用的词。</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select note_text</span><br><span class="line">from productnotes</span><br><span class="line">where match(note_text) against(&#x27;rabit&#x27;) with query expansion;</span><br></pre></td></tr></table></figure>

<h2 id="布尔文本搜索"><a href="#布尔文本搜索" class="headerlink" title="布尔文本搜索"></a>布尔文本搜索</h2><p>以布尔方式，可以提供关于如下内容的细节：</p>
<ul>
<li>要匹配的词；</li>
<li>要排斥的词（如果某行包含这个词，则不返回该行，即使它包含其他指定的词也是如此）；</li>
<li>排列提示（指定某些词比其他词更重要，更重要的词等级更高）；</li>
<li>表达式分组；</li>
<li>另外一些内容。</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select note_text</span><br><span class="line">from productnotes</span><br><span class="line">where match(note_text) Against(&#x27;heavy&#x27; IN BOOLEAN MODE);</span><br><span class="line"></span><br><span class="line"># 匹配heavey 但 -rope*明确地指示MySQL 排除包含rope*</span><br><span class="line">select note_text</span><br><span class="line">from productnotes</span><br><span class="line">where match(note_text) Against(&#x27;heavy -rope*&#x27; IN BOOLEAN MODE);</span><br></pre></td></tr></table></figure>


<p>全文布尔操作符</p>
<table>
<thead>
<tr>
<th>布尔操作符</th>
<th>说 明</th>
</tr>
</thead>
<tbody><tr>
<td>+</td>
<td>包含，词必须存在</td>
</tr>
<tr>
<td>-</td>
<td>排除，词必须不出现</td>
</tr>
<tr>
<td>&gt;</td>
<td>包含，而且增加等级值</td>
</tr>
<tr>
<td>&gt;</td>
<td>&lt; 包含，且减少等级值</td>
</tr>
<tr>
<td>()</td>
<td>把词组成子表达式（允许这些子表达式作为一个组被包含、排除、排列等）</td>
</tr>
<tr>
<td>~</td>
<td>取消一个词的排序值</td>
</tr>
<tr>
<td>*</td>
<td>词尾的通配符</td>
</tr>
<tr>
<td>“”</td>
<td>定义一个短语（与单个词的列表不一样，它匹配整个短语以便包含或排除这个短语）</td>
</tr>
</tbody></table>
<h1 id="插入数据"><a href="#插入数据" class="headerlink" title="插入数据"></a>插入数据</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 普通</span><br><span class="line">INSERT INTO &lt;table_name&gt;(column1,column2,...)</span><br><span class="line">values(value1,value2,...),(value11,value22,...);</span><br><span class="line"></span><br><span class="line"># 有插入查询能力支持</span><br><span class="line">INSERT [LOW_PRIORITY | HIGH_PRIORITY] [IGNORE]</span><br><span class="line">    [INTO] tbl_name</span><br><span class="line">    [PARTITION (partition_name [, partition_name] ...)]</span><br><span class="line">    [(col_name [, col_name] ...)]</span><br><span class="line">    &#123;SELECT ... | TABLE table_name&#125;</span><br><span class="line">    [ON DUPLICATE KEY UPDATE assignment_list]</span><br><span class="line"></span><br><span class="line">value:</span><br><span class="line">    &#123;expr | DEFAULT&#125;</span><br><span class="line"></span><br><span class="line">assignment:</span><br><span class="line">    col_name = value</span><br><span class="line"></span><br><span class="line">assignment_list:</span><br><span class="line">    assignment [, assignment] ...</span><br></pre></td></tr></table></figure>

<p>INSERT SELECT中的列名 为简单起见，这个例子在INSERT和SELECT语句中使用了相同的列名。但是，不一定要求列名匹配。事实上，MySQL甚至不关心SELECT返回的列名。它使用的是列的位置，因此SELECT中的第一列（不管其列名）将用来填充表列中指定的第一个列，第二列将用来填充表列中指定的第二个列，如此等等。这对于从使用不同列名的表中导入数据是非常有用的。</p>
<h1 id="更新数据"><a href="#更新数据" class="headerlink" title="更新数据"></a>更新数据</h1><p>基本的<br>UPDATE语句由3部分组成，分别是：</p>
<ul>
<li>要更新的表；</li>
<li>列名和它们的新值；</li>
<li>确定要更新行的过滤条件。</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># single table Syntax</span><br><span class="line">UPDATE [LOW_PRIORITY] [IGNORE] table_reference</span><br><span class="line">    SET assignment_list</span><br><span class="line">    [WHERE where_condition]</span><br><span class="line">    [ORDER BY ...]</span><br><span class="line">    [LIMIT row_count]</span><br><span class="line"></span><br><span class="line">value:</span><br><span class="line">    &#123;expr | DEFAULT&#125;</span><br><span class="line"></span><br><span class="line">assignment:</span><br><span class="line">    col_name = value</span><br><span class="line"></span><br><span class="line">assignment_list:</span><br><span class="line">    assignment [, assignment] ...</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line"># multiple-talbe syntax</span><br><span class="line">UPDATE [LOW_PRIORITY] [IGNORE] table_references</span><br><span class="line">    SET assignment_list</span><br><span class="line">    [WHERE where_condition]</span><br></pre></td></tr></table></figure>

<p>IGNORE 关键字 如果用UPDATE语句更新多行，并且在更新这些行中的一行或多行时出一个现错误，则整个UPDATE操作被取消（错误发生前更新的所有行被恢复到它们原来的值）。为即使是发生错误，也继续进行更新，可使用IGNORE关键字，如下所示：<code>UPDATE IGNORE customers…</code></p>
<h1 id="删除数据"><a href="#删除数据" class="headerlink" title="删除数据"></a>删除数据</h1><p>为了从一个表中删除（去掉）数据，使用DELETE语句。可以两种方式使用DELETE：</p>
<ul>
<li>从表中删除特定的行；</li>
<li>从表中删除所有行。</li>
</ul>
<p>省略了WHERE子句，则UPDATE或DELETE将被应用到表中所有的行。换句话说，如果执行UPDATE而不带WHERE子句，则表中每个行都将用新值更新。类似地，如果执行DELETE语句而不带WHERE子句，表的所有数据都将被删除。</p>
<p><strong>更快的删除</strong> 如果想从表中删除所有行，不要使用DELETE。可使用TRUNCATE TABLE语句，它完成相同的工作，但速度更快（TRUNCATE实际是删除原来的表并重新创建一个表，而不是逐行删除表中的数据）</p>
<h1 id="更新表"><a href="#更新表" class="headerlink" title="更新表"></a>更新表</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ALTER TABLE tbl_name</span><br><span class="line">    [alter_option [, alter_option] ...]</span><br><span class="line">    [partition_options]</span><br><span class="line"></span><br><span class="line">alter_option: &#123;</span><br><span class="line">    table_options</span><br><span class="line">  | ADD [COLUMN] col_name column_definition</span><br><span class="line">        [FIRST | AFTER col_name]</span><br><span class="line">  | ADD [COLUMN] (col_name column_definition,...)</span><br><span class="line">  | ADD &#123;INDEX | KEY&#125; [index_name]</span><br><span class="line">        [index_type] (key_part,...) [index_option] ...</span><br><span class="line">  | ADD &#123;FULLTEXT | SPATIAL&#125; [INDEX | KEY] [index_name]</span><br><span class="line">        (key_part,...) [index_option] ...</span><br><span class="line">  | ADD [CONSTRAINT [symbol]] PRIMARY KEY</span><br><span class="line">        [index_type] (key_part,...)</span><br><span class="line">        [index_option] ...</span><br><span class="line">  | ADD [CONSTRAINT [symbol]] UNIQUE [INDEX | KEY]</span><br><span class="line">        [index_name] [index_type] (key_part,...)</span><br><span class="line">        [index_option] ...</span><br><span class="line">  | ADD [CONSTRAINT [symbol]] FOREIGN KEY</span><br><span class="line">        [index_name] (col_name,...)</span><br><span class="line">        reference_definition</span><br><span class="line">  | ADD [CONSTRAINT [symbol]] CHECK (expr) [[NOT] ENFORCED]</span><br><span class="line">  | DROP &#123;CHECK | CONSTRAINT&#125; symbol</span><br><span class="line">  | ALTER &#123;CHECK | CONSTRAINT&#125; symbol [NOT] ENFORCED</span><br><span class="line">  | ALGORITHM [=] &#123;DEFAULT | INSTANT | INPLACE | COPY&#125;</span><br><span class="line">  | ALTER [COLUMN] col_name &#123;</span><br><span class="line">        SET DEFAULT &#123;literal | (expr)&#125;</span><br><span class="line">      | SET &#123;VISIBLE | INVISIBLE&#125;</span><br><span class="line">      | DROP DEFAULT</span><br><span class="line">    &#125;</span><br><span class="line">  | ALTER INDEX index_name &#123;VISIBLE | INVISIBLE&#125;</span><br><span class="line">  | CHANGE [COLUMN] old_col_name new_col_name column_definition</span><br><span class="line">        [FIRST | AFTER col_name]</span><br><span class="line">  | [DEFAULT] CHARACTER SET [=] charset_name [COLLATE [=] collation_name]</span><br><span class="line">  | CONVERT TO CHARACTER SET charset_name [COLLATE collation_name]</span><br><span class="line">  | &#123;DISABLE | ENABLE&#125; KEYS</span><br><span class="line">  | &#123;DISCARD | IMPORT&#125; TABLESPACE</span><br><span class="line">  | DROP [COLUMN] col_name</span><br><span class="line">  | DROP &#123;INDEX | KEY&#125; index_name</span><br><span class="line">  | DROP PRIMARY KEY</span><br><span class="line">  | DROP FOREIGN KEY fk_symbol</span><br><span class="line">  | FORCE</span><br><span class="line">  | LOCK [=] &#123;DEFAULT | NONE | SHARED | EXCLUSIVE&#125;</span><br><span class="line">  | MODIFY [COLUMN] col_name column_definition</span><br><span class="line">        [FIRST | AFTER col_name]</span><br><span class="line">  | ORDER BY col_name [, col_name] ...</span><br><span class="line">  | RENAME COLUMN old_col_name TO new_col_name</span><br><span class="line">  | RENAME &#123;INDEX | KEY&#125; old_index_name TO new_index_name</span><br><span class="line">  | RENAME [TO | AS] new_tbl_name</span><br><span class="line">  | &#123;WITHOUT | WITH&#125; VALIDATION</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">partition_options:</span><br><span class="line">    partition_option [partition_option] ...</span><br><span class="line"></span><br><span class="line">partition_option: &#123;</span><br><span class="line">    ADD PARTITION (partition_definition)</span><br><span class="line">  | DROP PARTITION partition_names</span><br><span class="line">  | DISCARD PARTITION &#123;partition_names | ALL&#125; TABLESPACE</span><br><span class="line">  | IMPORT PARTITION &#123;partition_names | ALL&#125; TABLESPACE</span><br><span class="line">  | TRUNCATE PARTITION &#123;partition_names | ALL&#125;</span><br><span class="line">  | COALESCE PARTITION number</span><br><span class="line">  | REORGANIZE PARTITION partition_names INTO (partition_definitions)</span><br><span class="line">  | EXCHANGE PARTITION partition_name WITH TABLE tbl_name [&#123;WITH | WITHOUT&#125; VALIDATION]</span><br><span class="line">  | ANALYZE PARTITION &#123;partition_names | ALL&#125;</span><br><span class="line">  | CHECK PARTITION &#123;partition_names | ALL&#125;</span><br><span class="line">  | OPTIMIZE PARTITION &#123;partition_names | ALL&#125;</span><br><span class="line">  | REBUILD PARTITION &#123;partition_names | ALL&#125;</span><br><span class="line">  | REPAIR PARTITION &#123;partition_names | ALL&#125;</span><br><span class="line">  | REMOVE PARTITIONING</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">key_part: &#123;col_name [(length)] | (expr)&#125; [ASC | DESC]</span><br><span class="line"></span><br><span class="line">index_type:</span><br><span class="line">    USING &#123;BTREE | HASH&#125;</span><br><span class="line"></span><br><span class="line">index_option: &#123;</span><br><span class="line">    KEY_BLOCK_SIZE [=] value</span><br><span class="line">  | index_type</span><br><span class="line">  | WITH PARSER parser_name</span><br><span class="line">  | COMMENT &#x27;string&#x27;</span><br><span class="line">  | &#123;VISIBLE | INVISIBLE&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">table_options:</span><br><span class="line">    table_option [[,] table_option] ...</span><br><span class="line"></span><br><span class="line">table_option: &#123;</span><br><span class="line">    AUTOEXTEND_SIZE [=] value</span><br><span class="line">  | AUTO_INCREMENT [=] value</span><br><span class="line">  | AVG_ROW_LENGTH [=] value</span><br><span class="line">  | [DEFAULT] CHARACTER SET [=] charset_name</span><br><span class="line">  | CHECKSUM [=] &#123;0 | 1&#125;</span><br><span class="line">  | [DEFAULT] COLLATE [=] collation_name</span><br><span class="line">  | COMMENT [=] &#x27;string&#x27;</span><br><span class="line">  | COMPRESSION [=] &#123;&#x27;ZLIB&#x27; | &#x27;LZ4&#x27; | &#x27;NONE&#x27;&#125;</span><br><span class="line">  | CONNECTION [=] &#x27;connect_string&#x27;</span><br><span class="line">  | &#123;DATA | INDEX&#125; DIRECTORY [=] &#x27;absolute path to directory&#x27;</span><br><span class="line">  | DELAY_KEY_WRITE [=] &#123;0 | 1&#125;</span><br><span class="line">  | ENCRYPTION [=] &#123;&#x27;Y&#x27; | &#x27;N&#x27;&#125;</span><br><span class="line">  | ENGINE [=] engine_name</span><br><span class="line">  | ENGINE_ATTRIBUTE [=] &#x27;string&#x27;</span><br><span class="line">  | INSERT_METHOD [=] &#123; NO | FIRST | LAST &#125;</span><br><span class="line">  | KEY_BLOCK_SIZE [=] value</span><br><span class="line">  | MAX_ROWS [=] value</span><br><span class="line">  | MIN_ROWS [=] value</span><br><span class="line">  | PACK_KEYS [=] &#123;0 | 1 | DEFAULT&#125;</span><br><span class="line">  | PASSWORD [=] &#x27;string&#x27;</span><br><span class="line">  | ROW_FORMAT [=] &#123;DEFAULT | DYNAMIC | FIXED | COMPRESSED | REDUNDANT | COMPACT&#125;</span><br><span class="line">  | SECONDARY_ENGINE_ATTRIBUTE [=] &#x27;string&#x27;</span><br><span class="line">  | STATS_AUTO_RECALC [=] &#123;DEFAULT | 0 | 1&#125;</span><br><span class="line">  | STATS_PERSISTENT [=] &#123;DEFAULT | 0 | 1&#125;</span><br><span class="line">  | STATS_SAMPLE_PAGES [=] value</span><br><span class="line">  | TABLESPACE tablespace_name [STORAGE &#123;DISK | MEMORY&#125;]</span><br><span class="line">  | UNION [=] (tbl_name[,tbl_name]...)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">partition_options:</span><br><span class="line">    (see CREATE TABLE options)</span><br></pre></td></tr></table></figure>

<p>例子：</p>
<ul>
<li><p>给表添加一个列</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">alter table vendor add vend_phone char(20);</span><br></pre></td></tr></table></figure></li>
<li><p>删掉表的列</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">alter table vendor drop vend_phone;</span><br></pre></td></tr></table></figure></li>
<li><p>定义外键</p>
  <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">alter table orderitems</span><br><span class="line">add constraint fk_orderitems_orders</span><br><span class="line">foreign key (order_num) references orders(order_item);</span><br></pre></td></tr></table></figure></li>
<li></li>
</ul>
<h1 id="删除表"><a href="#删除表" class="headerlink" title="删除表"></a>删除表</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">drop table table_names;</span><br></pre></td></tr></table></figure>

<h1 id="重命名表"><a href="#重命名表" class="headerlink" title="重命名表"></a>重命名表</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">rename table old_table_name1 to new_table_name1,</span><br><span class="line">[old_table_name2 to new_table_name2,</span><br><span class="line">old_table_name3 to new_table_name3,...];</span><br></pre></td></tr></table></figure>



<h1 id="视图"><a href="#视图" class="headerlink" title="视图"></a>视图</h1><h2 id="使用视图的原因"><a href="#使用视图的原因" class="headerlink" title="使用视图的原因"></a>使用视图的原因</h2><ul>
<li>重用SQL语句。</li>
<li>简化复杂的SQL操作。在编写查询后，可以方便地重用它而不必知道它的基本查询细节。</li>
<li>使用表的组成部分而不是整个表。</li>
<li>保护数据。可以给用户授予表的特定部分的访问权限而不是整个表的访问权限。 </li>
<li>更改数据格式和表示。视图可返回与底层表的表示和格式不同的数据。</li>
</ul>
<h2 id="视图的规则和限制"><a href="#视图的规则和限制" class="headerlink" title="视图的规则和限制"></a>视图的规则和限制</h2><ul>
<li>与表一样，视图必须唯一命名（不能给视图取与别的视图或表相同的名字）。</li>
<li>对于可以创建的视图数目没有限制。</li>
<li> 为了创建视图，必须具有足够的访问权限。这些限制通常由数据库管理人员授予。</li>
<li>视图可以嵌套，即可以利用从其他视图中检索数据的查询来构造一个视图。</li>
<li>ORDER BY可以用在视图中，但如果从该视图检索数据SELECT中也含有ORDER BY，那么该视图中的ORDER BY将被覆盖。</li>
<li>视图不能索引，也不能有关联的触发器或默认值。</li>
<li>视图可以和表一起使用。例如，编写一条联结表和视图的SELECT语句。</li>
</ul>
<h2 id="视图使用"><a href="#视图使用" class="headerlink" title="视图使用"></a>视图使用</h2><ul>
<li>视图用CREATE VIEW语句来创建。例子：<code>create view productcustomers as select cust_name,cust_constact,prod_id from customers,orders,orderitems where customers.cust_id=orders.cust_id and orderitems.order_num =orders.order_num;</code></li>
<li>使用SHOW CREATE VIEW viewname；来查看创建视图的语句。</li>
<li>用DROP删除视图，其语法为DROP VIEW viewname;。</li>
<li>更新视图时，可以先用DROP再用CREATE，也可以直接用CREATE OR REPLACE VIEW。如果要更新的视图不存在，则第2条更新语句会创建一个视图；如果要更新的视图存在，则第2条更新语句会替换原有视图。</li>
</ul>
<h2 id="视图更新"><a href="#视图更新" class="headerlink" title="视图更新"></a>视图更新</h2><p>视图定义中有以下操作，则不能进行视图的更新：</p>
<ul>
<li>分组（使用GROUP BY和HAVING）；</li>
<li>联结；</li>
<li>子查询；</li>
<li>并；</li>
<li>聚集函数（Min()、Count()、Sum()等）；</li>
<li>DISTINCT；</li>
<li>导出（计算）列。</li>
</ul>
<h1 id="存储过程"><a href="#存储过程" class="headerlink" title="存储过程"></a>存储过程</h1><p>存储过程简单来说，就是为以后的使用而保存的一条或多条MySQL语句的集合。可将其视为批文件，虽然它们的作用不仅限于批处理。</p>
<h2 id="执行存储过程"><a href="#执行存储过程" class="headerlink" title="执行存储过程"></a>执行存储过程</h2><p>MySQL称存储过程的执行为调用，因此MySQL执行存储过程的`语句为CALL。CALL接受存储过程的名字以及需要传递给它的任意参数。例子：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">call productpricing(@pricelow,@pricehigh,@priceaverage);</span><br></pre></td></tr></table></figure>

<p>其中，执行名为productpricing的存储过程，它计算并返回产<br>品的最低、最高和平均价格。</p>
<h2 id="创建存储过程"><a href="#创建存储过程" class="headerlink" title="创建存储过程"></a>创建存储过程</h2><p>例子：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">create procedure productpricing()</span><br><span class="line">begin</span><br><span class="line">	select avg(prod_price) as priceaverage</span><br><span class="line">	from products;</span><br><span class="line">end;</span><br><span class="line"></span><br><span class="line"># 存储过程接收3个参数 pl,ph,pa</span><br><span class="line"># 关键字OUT指出相应的参数用来从存储过程中传出一个值（返回给调用者）</span><br><span class="line"></span><br><span class="line">create procedure productpricing(</span><br><span class="line">    out pl decimal(8,2),</span><br><span class="line">    out ph decimal(8,2),</span><br><span class="line">    out pa decimal(8,2)</span><br><span class="line">)</span><br><span class="line">begin</span><br><span class="line">	select Min(prod_price)</span><br><span class="line">	into pl</span><br><span class="line">	from products;</span><br><span class="line">	select Max(prod_price)</span><br><span class="line">	into ph</span><br><span class="line">	from products;</span><br><span class="line">	select Avg(prod_price)</span><br><span class="line">	into pa</span><br><span class="line">	from products</span><br><span class="line">end;</span><br><span class="line"># 调用上述定义的存储过程</span><br><span class="line">call productpricing(@pricelow,@pricehigh,@priceaverage);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 使用IN 和OUT 参数</span><br><span class="line">create procedure ordertotal(</span><br><span class="line">    in onumber int,</span><br><span class="line">    out ototal decimal(8,2)</span><br><span class="line">)</span><br><span class="line">begin</span><br><span class="line">	select sum(item_price*quantity)</span><br><span class="line">	from orderitems</span><br><span class="line">	where order_num=onumber</span><br><span class="line">	into ototal;</span><br><span class="line">end;</span><br><span class="line"># 调用上述存储过程</span><br><span class="line">call ordertotal(20005,@total);</span><br><span class="line">select @total</span><br></pre></td></tr></table></figure>

<p>如果存储过程接受参数，它们将在()中列举出来。此存储过程没有参数，但后跟的()仍然需要。BEGIN和END语句用来限定存储过程体。</p>
<p>MySQL支持IN（传递给存储过程）、OUT（从存储过程传出，如这里所用）和INOUT（对存储过程传入和传出）类型的参数。</p>
<p>所有MySQL的变量都必须以@开始。</p>
<h2 id="删除存储过程"><a href="#删除存储过程" class="headerlink" title="删除存储过程"></a>删除存储过程</h2><p>例子，<code>drop procedure productpricing</code>。</p>
<h2 id="智能存储过程"><a href="#智能存储过程" class="headerlink" title="智能存储过程"></a>智能存储过程</h2><p>情况：</p>
<p>考虑这个场景。你需要获得与以前一样的订单合计，但需要对合计增加营业税，不过只针对某些顾客（或许是你所在州中那些顾客）。那么，你需要做下面几件事情：</p>
<ul>
<li>获得合计（与以前一样）；</li>
<li>把营业税有条件地添加到合计；</li>
<li>返回合计（带或不带税）。</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">create procedure ordertotal(</span><br><span class="line">    in onumber int,</span><br><span class="line">    in taxable boolean,</span><br><span class="line">    out ototal decimal(8,2)</span><br><span class="line">)comment &#x27;obtain order total,optionally adding tax&#x27;</span><br><span class="line">begin</span><br><span class="line">	--Declare variable for total</span><br><span class="line">	declare total decimal(8,2);</span><br><span class="line">	--declare tax percentage</span><br><span class="line">	declare taxrate int default 6;</span><br><span class="line">	</span><br><span class="line">	--get the order totaol</span><br><span class="line">	select sum(item_price*quantity)</span><br><span class="line">	from orderitems</span><br><span class="line">	where order_num=onumber</span><br><span class="line">	into total;</span><br><span class="line">	</span><br><span class="line">	--if this taxable</span><br><span class="line">	if taxable then</span><br><span class="line">		-- yes so add taxrate to the total</span><br><span class="line">		select total+(total/100*taxrate) into total</span><br><span class="line">	end if;</span><br><span class="line">		</span><br><span class="line">	-- And finally, save to out variable</span><br><span class="line">	select total into ototal;</span><br><span class="line">end;</span><br></pre></td></tr></table></figure>

<h2 id="检查存储过程"><a href="#检查存储过程" class="headerlink" title="检查存储过程"></a>检查存储过程</h2><p><code>show create procedure ordertotal</code></p>
<h1 id="游标"><a href="#游标" class="headerlink" title="游标"></a>游标</h1><p>游标（cursor）是一个存储在MySQL服务器上的数据库查询，它不是一条SELECT语句，而是被该语句检索出来的结果集。在存储了游标之后，应用程序可以根据需要滚动或浏览其中的数据。</p>
<p>MySQL游标只能用于存储过程（和函数）。</p>
<p>使用游标的步骤：</p>
<ul>
<li>在能够使用游标前，必须声明（定义）它。这个过程实际上没有检索数据，它只是定义要使用的SELECT语句。</li>
<li>一旦声明后，必须打开游标以供使用。这个过程用前面定义的SELECT语句把数据实际检索出来。</li>
<li>对于填有数据的游标，根据需要取出（检索）各行。</li>
<li>在结束游标使用时，必须关闭游标。</li>
</ul>
<h2 id="创建游标"><a href="#创建游标" class="headerlink" title="创建游标"></a>创建游标</h2><p>游标使用DECLARE 语句创建。DECLARE命名游标，并定义<br>相应的SELECT语句，根据需要带WHERE和其他子句。例子：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">create procedure processorders()</span><br><span class="line">begin</span><br><span class="line">    -- 定义了declare的游标</span><br><span class="line">	declare ordernumbers cursor</span><br><span class="line">	for </span><br><span class="line">	select order_num from orders;</span><br><span class="line">	</span><br><span class="line">	OPEN ordernumbers;</span><br><span class="line">	</span><br><span class="line">	CLOSE ordernumbers;</span><br><span class="line">end;</span><br></pre></td></tr></table></figure>

<h2 id="打开和关闭游标"><a href="#打开和关闭游标" class="headerlink" title="打开和关闭游标"></a>打开和关闭游标</h2><p>打开：<code>open ordernumbers</code></p>
<p>关闭：<code>close ordernumbers</code></p>
<p>如果你不明确关闭游标，MySQL将会在到达END语句时自动关闭它。</p>
<h2 id="使用游标数据"><a href="#使用游标数据" class="headerlink" title="使用游标数据"></a>使用游标数据</h2><p>在一个游标被打开后，可以使用FETCH语句分别访问它的每一行。FETCH指定检索什么数据（所需的列），检索出来的数据存储在什么地方。它还向前移动游标中的内部行指针，使下一条FETCH语句检索下一行（不重复读取同一行）。</p>
<ul>
<li><p><strong>取单行数据</strong>（第一行）</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">create procedure processorders()</span><br><span class="line">begin</span><br><span class="line">	declare o int;</span><br><span class="line">	</span><br><span class="line">	declare ordernumbers cursor</span><br><span class="line">	for</span><br><span class="line">	select order_num from orders;</span><br><span class="line">	</span><br><span class="line">	open ordernumbers;</span><br><span class="line">	</span><br><span class="line">	fetch ordernumbers into o;</span><br><span class="line">	</span><br><span class="line">	close ordernumbers;</span><br><span class="line">end;</span><br></pre></td></tr></table></figure></li>
<li><p><strong>循环检索数据</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">create procedure processorders()</span><br><span class="line">begin</span><br><span class="line">	declare done boolean default 0;</span><br><span class="line">	declare o int;</span><br><span class="line">	</span><br><span class="line">	declare ordernumbers cursor</span><br><span class="line">	for </span><br><span class="line">	select order_num from orders;</span><br><span class="line">	</span><br><span class="line">	open ordernumbers;</span><br><span class="line">	repeat</span><br><span class="line">		fetch ordernumbers into o;</span><br><span class="line">	until done end repeat;</span><br><span class="line">	</span><br><span class="line">	close ordernumbers;</span><br><span class="line">end;</span><br></pre></td></tr></table></figure>

<ul>
<li>示例高级处理</li>
</ul>
  <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">create procedure processorders()</span><br><span class="line">begin</span><br><span class="line">	--Declare a local variable</span><br><span class="line">	declare ordernumbers cursor</span><br><span class="line">	for </span><br><span class="line">	select order_num from orders;</span><br><span class="line">	--declare continue handler</span><br><span class="line">	declare continue handler for sqlstate &#x27;02000&#x27; set done=1;</span><br><span class="line">	</span><br><span class="line">	--create table to store the results</span><br><span class="line">	create table if not exists ordertotals(order_num int,total decimal(8,2));</span><br><span class="line">	</span><br><span class="line">	--open the cursor</span><br><span class="line">	open ordernumbers;</span><br><span class="line">	</span><br><span class="line">	--loop through all rows</span><br><span class="line">	repeat</span><br><span class="line">		</span><br><span class="line">		--get order number</span><br><span class="line">		fetch ordernumbers into o;</span><br><span class="line">		--get the total for this order</span><br><span class="line">		call ordertotal(o,1,t);</span><br><span class="line">		</span><br><span class="line">		--insert order and total into ordertotals</span><br><span class="line">		insert into ordertotals(order_num,total)</span><br><span class="line">		values(o,t);</span><br><span class="line">		</span><br><span class="line">		--end of loop</span><br><span class="line">		until done end repeat;</span><br><span class="line">		</span><br><span class="line">		--close the cursor</span><br><span class="line">		close ordernumbers; </span><br><span class="line">end;</span><br></pre></td></tr></table></figure></li>
<li></li>
<li></li>
</ul>
<h1 id="触发器"><a href="#触发器" class="headerlink" title="触发器"></a>触发器</h1><p>Mysql 响应以下任意语句而自动执行的一条MySQL语句（或位于BEGIN 和END语句之间的一组语句）：</p>
<ul>
<li>DELETE</li>
<li>INSERT</li>
<li>UPDATE</li>
</ul>
<h2 id="创建触发器"><a href="#创建触发器" class="headerlink" title="创建触发器"></a>创建触发器</h2><p>创建触发器时，需要给出4条信息：</p>
<ul>
<li>唯一的触发器名</li>
<li>触发器关联的表</li>
<li>触发器应该响应的活动（DELETE、INSERT和UPDATE）</li>
<li>触发器何时执行（处理之前或之后）</li>
</ul>
<p><strong>保持每个数据库的触发器名唯一 在MySQL 5中，触发器名必须在每个表中唯一，但不是在每个数据库中唯一</strong>。这表示同一数据库中的两个表可具有相同名字的触发器。这在其他每个数据库触发器名必须唯一的DBMS中是不允许的，而且以后的MySQL版本很可能会使命名规则更为严格。因此，现在最好是在数据库范围内使用唯一的触发器名。</p>
]]></content>
      <categories>
        <category>mysql</category>
      </categories>
      <tags>
        <tag>mysql</tag>
        <tag>notes</tag>
      </tags>
  </entry>
  <entry>
    <title>数据库横表纵表分析</title>
    <url>/2022/01/05/%E6%95%B0%E6%8D%AE%E5%BA%93%E6%A8%AA%E8%A1%A8%E7%BA%B5%E8%A1%A8%E5%88%86%E6%9E%90/</url>
    <content><![CDATA[<p>参考链接：  </p>
<ul>
<li><a href="https://blog.csdn.net/zhangzeyuaaa/article/details/50675058">纵表和横表的概念及其相互转换</a></li>
<li><a href="https://www.cnblogs.com/wy123/p/6677073.html">数据库设计—关于建表的时候选择横表和竖表(纵表)的一点思考</a></li>
<li><h1 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h1><h2 id="横表"><a href="#横表" class="headerlink" title="横表"></a>横表</h2>普通的建表方式，如表结构：<code>主键、字段1、字段2、字段3...</code>。类似于以<code>Key-value1-value2-value3</code>的形式存储。</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `horizontal_table` (</span><br><span class="line">  `员工编号` <span class="type">char</span>(<span class="number">6</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `基本工资` <span class="type">int</span> <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `加班工资` <span class="type">int</span> <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `报销费用` <span class="type">int</span> <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `社保扣款` <span class="type">int</span> <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `公积金扣款` <span class="type">int</span> <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `个税扣款` <span class="type">int</span> <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`员工编号`)</span><br><span class="line">)</span><br></pre></td></tr></table></figure>
<p><img src="/2022/01/05/%E6%95%B0%E6%8D%AE%E5%BA%93%E6%A8%AA%E8%A1%A8%E7%BA%B5%E8%A1%A8%E5%88%86%E6%9E%90/%E6%A8%AA%E8%A1%A8.png" alt="横表"></p>
<h2 id="纵表"><a href="#纵表" class="headerlink" title="纵表"></a>纵表</h2><p>纵表后，则表结构为：<code>主键、字段代码、字段值</code>。而字段代码则为字段1、字段2、字段3…。  特点是每行进存储某一个实体记录的某一个字段的值，类似于以行的形式<code>Key-Value</code>进行存储。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `vertical_table` (</span><br><span class="line">  `id` <span class="type">int</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT,</span><br><span class="line">  `员工编号` <span class="type">varchar</span>(<span class="number">6</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `款项` <span class="type">varchar</span>(<span class="number">20</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `金额` <span class="type">int</span> <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`id`)</span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB AUTO_INCREMENT<span class="operator">=</span><span class="number">5</span> <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8mb4 <span class="keyword">COLLATE</span><span class="operator">=</span>utf8mb4_0900_ai_ci</span><br></pre></td></tr></table></figure>
<p><img src="/2022/01/05/%E6%95%B0%E6%8D%AE%E5%BA%93%E6%A8%AA%E8%A1%A8%E7%BA%B5%E8%A1%A8%E5%88%86%E6%9E%90/%E7%BA%B5%E8%A1%A8.png" alt="纵表"></p>
<table>
<thead>
<tr>
<th></th>
<th>横表</th>
<th>纵表</th>
</tr>
</thead>
<tbody><tr>
<td>表结构</td>
<td>主键、字段1、字段2、字段3…</td>
<td>主键、字段代码、字段值</td>
</tr>
<tr>
<td>优点</td>
<td>一条表示一个实体记录，清晰</td>
<td>给表新增字段，只需要新增一些记录。灵活拓展存储的内容，具有一定的共用性</td>
</tr>
<tr>
<td>缺点</td>
<td>给表新增字段，必须重构表结构，不方便拓展和公用</td>
<td>数据描述比横表不清晰。如果需要分组统计，需要先group by，较繁琐</td>
</tr>
<tr>
<td>形式</td>
<td>Key-Value1-Value2-…（一条）</td>
<td>Key-Value1（多条）</td>
</tr>
<tr>
<td></td>
<td>各个字段的值是自由的</td>
<td>字段的类型是固定的，类型要兼容</td>
</tr>
<tr>
<td></td>
<td>表中不存储描述性字段本身（相对于纵表）</td>
<td>表中需要存储描述性字段本身（相比横表）</td>
</tr>
<tr>
<td></td>
<td>存储同样多的数据，行数要少（相对于纵表）</td>
<td>存储同样多的数据，行数要多（相对于横表）</td>
</tr>
</tbody></table>
<p><strong>把不容易改动表结构的设计成横表，把容易经常改动不确定的表结构设计成纵表。</strong> </p>
<h1 id="横表纵表转换"><a href="#横表纵表转换" class="headerlink" title="横表纵表转换"></a>横表纵表转换</h1><h2 id="横表转纵表"><a href="#横表转纵表" class="headerlink" title="横表转纵表"></a>横表转纵表</h2><p>以下图横表为例转换为纵表。</p>
<p><img src="/2022/01/05/%E6%95%B0%E6%8D%AE%E5%BA%93%E6%A8%AA%E8%A1%A8%E7%BA%B5%E8%A1%A8%E5%88%86%E6%9E%90/%E6%A8%AA%E8%A1%A8.png" alt="待转换横表"></p>
<p>转换后的纵表如下图所示：</p>
<p><img src="/2022/01/05/%E6%95%B0%E6%8D%AE%E5%BA%93%E6%A8%AA%E8%A1%A8%E7%BA%B5%E8%A1%A8%E5%88%86%E6%9E%90/%E6%A8%AA%E8%A1%A8%E8%BD%AC%E7%BA%B5%E8%A1%A8.png" alt="横表转纵表"></p>
<p>使用的转换语句如下所示：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select h.`员工编号`,</span><br><span class="line">&#x27;基本工资&#x27; as `类别`,</span><br><span class="line">h.`基本工资` as `金额`</span><br><span class="line">from horizontal_table h</span><br><span class="line"></span><br><span class="line">union all</span><br><span class="line"></span><br><span class="line">select `员工编号`,</span><br><span class="line">&#x27;加班工资&#x27; as `类别`,</span><br><span class="line">`加班工资` as `金额`</span><br><span class="line">from horizontal_table</span><br><span class="line"></span><br><span class="line">union all</span><br><span class="line"></span><br><span class="line">select `员工编号`,</span><br><span class="line">&#x27;报销费用&#x27; as `类别`,</span><br><span class="line">`报销费用` as `金额`</span><br><span class="line">from horizontal_table</span><br><span class="line"></span><br><span class="line">union all</span><br><span class="line"></span><br><span class="line">select `员工编号`,</span><br><span class="line">&#x27;社保扣款&#x27; as `类别`,</span><br><span class="line">`社保扣款` as `金额`</span><br><span class="line">from horizontal_table</span><br><span class="line"></span><br><span class="line">union all</span><br><span class="line"></span><br><span class="line">select `员工编号`,</span><br><span class="line">&#x27;公积金扣款&#x27; as `类别`,</span><br><span class="line">`公积金扣款` as `金额`</span><br><span class="line">from horizontal_table</span><br><span class="line"></span><br><span class="line">union all</span><br><span class="line"></span><br><span class="line">select `员工编号`,</span><br><span class="line">&#x27;个税扣款&#x27; as `类别`,</span><br><span class="line">`个税扣款` as `金额`</span><br><span class="line">from horizontal_table</span><br><span class="line"></span><br><span class="line">order by `员工编号`</span><br></pre></td></tr></table></figure>



<h2 id="纵表转横表"><a href="#纵表转横表" class="headerlink" title="纵表转横表"></a>纵表转横表</h2><p>以下图纵表为例转换为横表。</p>
<p><img src="/2022/01/05/%E6%95%B0%E6%8D%AE%E5%BA%93%E6%A8%AA%E8%A1%A8%E7%BA%B5%E8%A1%A8%E5%88%86%E6%9E%90/%E5%BE%85%E8%BD%AC%E6%8D%A2%E7%BA%B5%E8%A1%A8.png" alt="代转换纵表"></p>
<p>转换为横表的结果如下图所示：</p>
<p><img src="/2022/01/05/%E6%95%B0%E6%8D%AE%E5%BA%93%E6%A8%AA%E8%A1%A8%E7%BA%B5%E8%A1%A8%E5%88%86%E6%9E%90/%E7%BA%B5%E8%A1%A8%E8%BD%AC%E6%A8%AA%E8%A1%A8.png" alt="纵表转横表"></p>
<p>使用的SQL语句如下所示：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> v.`员工编号`,</span><br><span class="line"><span class="built_in">sum</span>(<span class="keyword">case</span> v.`款项` <span class="keyword">when</span> <span class="string">&#x27;基本工资&#x27;</span> <span class="keyword">then</span> v.`金额` <span class="keyword">end</span>) <span class="keyword">as</span> 基本工资,</span><br><span class="line"><span class="built_in">sum</span>(<span class="keyword">case</span> v.`款项` <span class="keyword">when</span> <span class="string">&#x27;加班工资&#x27;</span> <span class="keyword">then</span> v.`金额` <span class="keyword">end</span>) <span class="keyword">as</span> 加班工资,</span><br><span class="line"><span class="built_in">sum</span>(<span class="keyword">case</span> v.`款项` <span class="keyword">when</span> <span class="string">&#x27;报销费用&#x27;</span> <span class="keyword">then</span> v.`金额` <span class="keyword">end</span>) <span class="keyword">as</span> 报销费用,</span><br><span class="line"><span class="built_in">sum</span>(<span class="keyword">case</span> v.`款项` <span class="keyword">when</span> <span class="string">&#x27;社保费用&#x27;</span> <span class="keyword">then</span> v.`金额` <span class="keyword">end</span>) <span class="keyword">as</span> 社保费用</span><br><span class="line"><span class="keyword">from</span> vertical_table v</span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> v.`员工编号`</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>mysql</category>
      </categories>
      <tags>
        <tag>mysql</tag>
      </tags>
  </entry>
</search>
